<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KIKOのSPACE</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.kiko.space/"/>
  <updated>2018-11-24T13:37:51.738Z</updated>
  <id>https://blog.kiko.space/</id>
  
  <author>
    <name>Anapopo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows 编译 OpenCV</title>
    <link href="https://blog.kiko.space/2018/11/24/windows-and-cmake-compile-opencv/"/>
    <id>https://blog.kiko.space/2018/11/24/windows-and-cmake-compile-opencv/</id>
    <published>2018-11-24T13:29:17.000Z</published>
    <updated>2018-11-24T13:37:51.738Z</updated>
    
    <content type="html"><![CDATA[<p>由于课程需要，要在 Windows 下编译一个支持 OpenGL 的 OpenCV 旧版本。<br>这里简单地做个总结，以便以后参阅。</p><a id="more"></a><h3 id="0x0-准备工作"><a href="#0x0-准备工作" class="headerlink" title="0x0 准备工作"></a>0x0 准备工作</h3><h4 id="编译环境"><a href="#编译环境" class="headerlink" title="# 编译环境"></a># <strong>编译环境</strong></h4><ul><li>Windows 10 1809</li><li>CMake 3.13.0</li><li>OpenCV 2.4.13.6-vc14</li><li>Visual Stuido 2017</li></ul><h4 id="安装CMake"><a href="#安装CMake" class="headerlink" title="# 安装CMake"></a># <strong>安装CMake</strong></h4><p>首先需要安装 CMake，进入官网下载安装包，优先选择 <a href="https://github.com/Kitware/CMake/releases/download/v3.13.0/cmake-3.13.0-win64-x64.msi" target="_blank" rel="noopener">cmake-3.13.0-win64-x64.msi</a>，安装完成后可以在开始菜单中找到 <code>cmake-gui</code>。</p><h4 id="下载-OpenCV-源代码"><a href="#下载-OpenCV-源代码" class="headerlink" title="# 下载 OpenCV 源代码"></a># <strong>下载 OpenCV 源代码</strong></h4><p>进入 <a href="https://opencv.org/releases.html" target="_blank" rel="noopener">OpenCV 的发布页面</a> 下载 OpenCV 源码包，我下载的是 <code>2.4.13.6</code> 版本。<br>运行 <code>opencv-2.4.13.6-vc14.exe</code>，选择解压目录后解压，我选择解压到 <code>H:\</code>。<br>解压后文件目录如下：</p><pre class="line-numbers language-plaintext"><code class="language-plaintext">H:\opencv├── build├── sources├── LICENSE.txt└── README.md.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了方便区分，我们把目录改名 <code>opencv-&gt;opencv2413</code><br>接下来打开 build 文件夹，发现无论是 <code>x86</code> 还是 <code>x64</code> 文件夹下都只有 <code>vc14</code> 版本的二进制、库文件等。</p><pre class="line-numbers language-plaintext"><code class="language-plaintext">H:\opencv├── build|    ├── x86|    |    └── vc14|    └── x64|        └── vc14├── sources├── LICENSE.txt└── README.md.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而我们的 <code>Visual Studio 2017</code> 对应的版本号是 <code>vc15</code>，也就是官方并没有提供新版本的预编译库文件，所以我要自己动手编译了。这样一来可以把 OpenGL 编译进去，<strong>首先清空 build 目录里的所有内容</strong>，因为我们下一步要将编译后的文件放入 build 目录。</p><p><strong>Tips: VC1x 与 Visual Studio 版本号的对应关系</strong></p><table><thead><tr><th>VC1x</th><th>Visual Studio 版本号</th></tr></thead><tbody><tr><td>vc15</td><td>Visual Studio 2017</td></tr><tr><td>vc14</td><td>Visual Studio 2015</td></tr><tr><td>vc12</td><td>Visual Studio 2013</td></tr><tr><td>vc11</td><td>Visual Studio 2012</td></tr><tr><td>vc10</td><td>Visual Studio 2010</td></tr></tbody></table><h3 id="0x1-编译-OpenCV"><a href="#0x1-编译-OpenCV" class="headerlink" title="0x1 编译 OpenCV"></a>0x1 编译 OpenCV</h3><h4 id="CMake-GUI-纪元"><a href="#CMake-GUI-纪元" class="headerlink" title="# CMake-GUI 纪元"></a># CMake-GUI 纪元</h4><p>现在打开 <code>cmake-gui</code></p><blockquote><p>Where is the source code: </p></blockquote><p>先选择待编译的源码目录，我选择的是 <code>H:\opencv2413\sources</code></p><blockquote><p>Where to build the binaries:</p></blockquote><p>然后选择编译完成后的生成目录，我选择的是 <code>H:\opencv2413\build</code></p><p>接下来点击左下角的 <code>Configure</code> 按钮，弹出对话框选择 <code>Visual Studio 15 2017</code>，下面的选项默认，然后点击 <code>Finish</code>，等待出现 Configuring done。</p><p><img src="https://i.loli.net/2018/11/24/5bf91600c83ad.png" alt="cmake-configure"></p><p>接下来找到 <code>WITH_OPENGL</code>，并且把它勾选上，这样 OpenCV 就有 OpenGL 加持了。</p><p><strong>再次点击 <code>Configure</code> 按钮，使之生效。</strong></p><p>具体可以查看输出信息，确实是支持 OpenGL 的。</p><pre class="line-numbers language-plaintext"><code class="language-plaintext">...GUI:   QT:                          NO  Win32 UI:                    YES  OpenGL support:              YES (opengl32 glu32)  VTK support:                 NO...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点击 <code>Generate</code> 后等待出现 Generating done，然后点击 <code>Open Project</code> 打开 Visual Studio 项目。</p><h4 id="Visual-Studio-纪元"><a href="#Visual-Studio-纪元" class="headerlink" title="# Visual Studio 纪元"></a># Visual Studio 纪元</h4><p>打开「解决方案资源管理器」，如果找不到可以在「视图(V)」中打开。</p><p><img src="https://i.loli.net/2018/11/24/5bf91a4e5aac5.png" alt="solution"></p><p><strong>首先选择 <code>Release</code> 模式</strong>，右键 <code>INSTALL</code> 选择生成，开始编译，编译的时间视机器的性能而定。</p><p>很长时间过去了…</p><p>最后，我们可以发现编译后的文件在 <code>H:\opencv2413\build\install</code> 文件夹里。</p><p>后续，大概还会尝试编译一些 OpenCV 相关的项目吧😋。</p><h3 id="0x2-参考资料"><a href="#0x2-参考资料" class="headerlink" title="0x2 参考资料"></a>0x2 参考资料</h3><ul><li><a href="https://blog.csdn.net/Dango_miracle/article/details/78681131" target="_blank" rel="noopener">【OpenCV】VS2017配置OpenCV2.4.13.4</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于课程需要，要在 Windows 下编译一个支持 OpenGL 的 OpenCV 旧版本。&lt;br&gt;这里简单地做个总结，以便以后参阅。&lt;/p&gt;
    
    </summary>
    
    
      <category term="cmake" scheme="https://blog.kiko.space/tags/cmake/"/>
    
      <category term="opencv" scheme="https://blog.kiko.space/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>全新安装 Ubuntu 18.04</title>
    <link href="https://blog.kiko.space/2018/09/19/install-ubuntu-18.04/"/>
    <id>https://blog.kiko.space/2018/09/19/install-ubuntu-18.04/</id>
    <published>2018-09-19T08:51:00.000Z</published>
    <updated>2018-10-28T11:26:44.742Z</updated>
    
    <content type="html"><![CDATA[<p>首先打开<a href="https://mirrors4.tuna.tsinghua.edu.cn/help/ubuntu/" target="_blank" rel="noopener">「清华大学镜像站」</a>，获取 Ubuntu 的国内镜像地址。不要问我为什么用清华镜像源，因为主页看起来很<del>可口</del>漂亮，速度比较快。</p><a id="more"></a><p>然后编辑 <code>/etc/apt/sources.list</code> 用以下内容替换原有内容。</p><p><img src="https://i.loli.net/2018/09/19/5ba1ed9c35a39.png" alt=""></p><h3 id="0、安装基本组件"><a href="#0、安装基本组件" class="headerlink" title="0、安装基本组件"></a>0、安装基本组件</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> apt upgrade<span class="token function">sudo</span> apt <span class="token function">install</span> <span class="token function">git</span> curl vim zsh fcitx gnome-session gnome-tweak-tool<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后是配置 ZSH 的一系列组件，这里先附上三个项目地址，下面会<del>用到</del>看到它们的名字：</p><ul><li><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh</a></li><li><a href="https://github.com/zsh-users/zsh-syntax-highlighting" target="_blank" rel="noopener">zsh-syntax-highlighting</a></li><li><a href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="noopener">zsh-autosuggestions</a></li></ul><p>当前状态是刚装完 <code>zsh</code>，什么都还没做，如果当前默认 Shell 不是 <code>zsh</code> 的话，可以通过 <code>chsh</code> 命令来指定当前用户的默认 Shell。</p><p>依次执行官方提供的三个脚本：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 这个安装 oh-my-zsh 到你的 `~/.oh-my-zsh` 目录</span>sh -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span>curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span class="token comment" spellcheck="true"># 这个安装命令自动补全插件</span><span class="token function">git</span> clone https://github.com/zsh-users/zsh-autosuggestions <span class="token variable">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-autosuggestions<span class="token comment" spellcheck="true"># 这个安装语法自动高亮插件</span><span class="token function">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="token variable">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-syntax-highlighting<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>等待安装完毕以后，打开你的 <code>.zshrc</code> 文件，修改如下：</p><pre class="line-numbers language-bash"><code class="language-bash">plugins<span class="token operator">=</span><span class="token punctuation">(</span>  <span class="token function">git</span>  zsh-autosuggestions  zsh-syntax-highlighting <span class="token comment" spellcheck="true"># 这个一定要在最后一行</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后重新登录即可生效，不过我一般都是 <code>source .zshrc</code> 直接生效。</p><h3 id="1、配置搜狗输入法"><a href="#1、配置搜狗输入法" class="headerlink" title="1、配置搜狗输入法"></a>1、配置搜狗输入法</h3><p>首先确保 <code>fcitx</code>安装成功，可以先执行 <code>fcitx-diagnose</code> 查看下当前的状态。<br>然后前往搜狗输入法官网 <a href="https://pinyin.sogou.com/linux/" target="_blank" rel="noopener">戳我</a> 下载 deb 包，最后双击安装。</p><p><img src="https://i.loli.net/2018/09/19/5ba1eec212e57.png" alt=""></p><p>接下来是配置部分：<br>(1)、在普通的使用 <code>Xorg</code> 协议的 Gnome 上</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 编辑 ~/.xprofile 没有就创建一个</span>GTK_IM_MODULE<span class="token operator">=</span>fcitxQT_IM_MODULE<span class="token operator">=</span>fcitxXMODIFIERS<span class="token operator">=</span>@im<span class="token operator">=</span>fcitx<span class="token comment" spellcheck="true"># fcitx 的自启动</span>fcitx <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2)、在使用了 <code>Wayland</code> 协议的 Gnome 上</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 由于 Wayland 协议无法读取 `.xprofile` 文件，所以编辑 `/etc/environment` 文件</span><span class="token comment" spellcheck="true"># 原来的此处应该有定义 PATH 变量，不要去改变它。</span>GTK_IM_MODULE<span class="token operator">=</span>fcitxQT_IM_MODULE<span class="token operator">=</span>fcitxXMODIFIERS<span class="token operator">=</span>@im<span class="token operator">=</span>fcitx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于 <code>fcitx</code> 的自启动，把 <code>/usr/share/fcitx/xdg/autostart/fcitx-autostart.desktop</code> 文件拷贝至 <code>/etc/xdg/autostart</code>下即可。</p><p>[<em>可选项] 由于使用了 <code>fcitx</code>，具有强迫症的话可以执行 <code>sudo apt purge ibus</code> 把自带的 <code>ibus</code>卸载。<br>[</em>可选项] 可以使用搜狗输入法的所有皮肤（除动态皮肤以外），所以去官网挑一个喜欢的皮肤下载后双击安装即可。推荐 <a href="https://pinyin.sogou.com/skins/detail/view/info/559973" target="_blank" rel="noopener">柔兰</a></p><h3 id="2、安装常用软件"><a href="#2、安装常用软件" class="headerlink" title="2、安装常用软件"></a>2、安装常用软件</h3><p>有很多软件都是跨平台的，跨平台的技术大概有 <code>Electron</code>、<code>Qt</code>、<code>AppImage</code>等等。<br>需要什么软件，只要通过 <code>&lt;软件名&gt; + Linux</code> 关键词去搜索引擎找一找就可以了。</p><p>我安装了 <code>Visual Studio Code</code>、<code>Telegram</code>、<code>Typora</code> 这三款。<br>其中 <code>VSCode</code>可以在官网下载到 deb 包，而在 Ubuntu 官方软件仓库中的<code>Telegram</code> 采用了 <code>snap</code> 技术。我尝试安装了 N 次都失败了，所以去官网下载了二进制包，写个 <code>DesktopEntry</code> 丢进 <code>~/.local/share/applications/</code> 就直接拿来用了。</p><p><code>DesktopEntry</code> 一并附上，来源 <a href="https://i-meto.com/telegram-ibus/" target="_blank" rel="noopener">@METO</a>，在此感谢~<br>文件名 ：<code>telegramdesktop.desktop</code></p><pre><code>[Desktop Entry]Version=1.0Name=Telegram DesktopComment=Official desktop application for the Telegram messaging serviceTryExec=/opt/Telegram/TelegramExec=/opt/Telegram/Telegram -- %uIcon=telegramTerminal=falseStartupWMClass=TelegramDesktopType=ApplicationCategories=Network;InstantMessaging;Qt;MimeType=x-scheme-handler/tg;X-Desktop-File-Install-Version=0.23</code></pre><p><code>Typora</code>是一款很棒的 MarkDown 写作软件，安装步骤也比较简单，只要添加软件源后 <code>sudo apt install typora</code> 就好了。</p><h3 id="3、配置科学上网环境"><a href="#3、配置科学上网环境" class="headerlink" title="3、配置科学上网环境"></a>3、配置科学上网环境</h3><h4 id="其一（electron-ssr）："><a href="#其一（electron-ssr）：" class="headerlink" title="其一（electron-ssr）："></a>其一（electron-ssr）：</h4><p>在 Ubuntu下较好的科学上网方式除了普通的 <code>ShadowsocksR-libev</code>、 <code>Shadowsocks-Qt</code> 和 <code>Python</code> 方式，还可以采用 <code>electron-ssr</code>这个项目，在 Release 界面有提供 deb 包，甚至还有 ArchLinux 的 pacman 包。</p><p>界面如下图：<br><img src="https://i.loli.net/2018/09/19/5ba1f614e89a6.png" alt=""></p><p>由于 <code>electron-ssr</code> 采用 Python 作为后端，所以在启动 <code>electron-ssr</code> 之前，要确保 Python 环境配置好。如果系统中没有 <code>python</code> 命令的话，程序是可以打开，但是没有任何报错（终端启动可以看到报错），使用 <code>netstat -lntp</code> 查看也没有 <code>1080</code> 端口被打开。</p><p>首先查看 <code>python</code> 命令是否存在，不存在就先执行 <code>sudo ln /usr/bin/python3 /usr/bin/python</code>，这里我用一个软链接把 <code>python3</code> 链接到 <code>python</code> 上，这样的话系统查找 <code>python</code> 的时候就直接可以使用 <code>python3</code> 。</p><p>打开 <code>electron-ssr</code> 选择不启用代理后，可以 使用 <code>netstat -lntp</code> 查看到 1080 端口已经打开，这是一种 <code>socks5</code> 代理，代理地址为 <code>127.0.0.1:1080</code>。</p><p>[巧合？] 我在测试启动的时候提示找不到 <code>canberra-gtk-module</code>，遂安装 <code>libcanberra-gtk-module</code>解决。<br>[小提示] 使用 netstat 命令之前需要先安装 <code>net-tools</code> 软件包。<br>[*可选项] 搭配浏览器拓展 <code>SwitchyOmega</code> 可以获得更加精准的流量转发。</p><h4 id="其二（proxychains-ng）："><a href="#其二（proxychains-ng）：" class="headerlink" title="其二（proxychains-ng）："></a>其二（proxychains-ng）：</h4><p>这种方案更加适用于终端，首先准备编译环境 <code>sudo apt install build-essential</code><br>打开<a href="https://github.com/rofl0r/proxychains-ng" target="_blank" rel="noopener">项目主页</a>，把源码通过 <code>git clone</code> 或是直接下载压缩包至本地并解压。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> proxychains-ng./configure --prefix<span class="token operator">=</span>/usr --sysconfdir<span class="token operator">=</span>/etc<span class="token function">sudo</span> <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">install</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> install-config<span class="token function">sudo</span> <span class="token function">make</span> clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行完毕后可以发现库文件、二进制文件和配置文件都已经各就各位。这，就是 Unix 哲学。</p><ul><li>/usr/lib/libproxychains4.so</li><li>/usr/bin/proxychains4</li><li>/etc/proxychains.conf</li></ul><p>接着修改配置文件 <code>sudo vim /etc/proxychains.conf</code>（忘记 sudo 赶紧退出来，别编辑了），来到最后一行。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 可以使用多种代理，程序会逐行尝试，改成下面的代理地址并保存</span><span class="token punctuation">[</span>ProxyList<span class="token punctuation">]</span>socks5 127.0.0.1 1080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在可以通过 <code>proxychains4 &lt;需要代理的命令&gt;</code> 来使用代理，举个例子 <code>proxychains4 curl https://www.google.com</code>，不出意外可以看到一堆文字。</p><p>Q: 那么老师能不能给力一点啊？<br>A: 再懒一点的话可把 <code>alias ssr=&#39;proxychains4&#39;</code>写入你的  .bashrc 或是 .zshrc 文件里，使用 <code>ssr curl https://www.google.com</code></p><p>Q: 那么老师能不能再给力一点啊？<br>A: 使用 <code>proxychains4 -q /bin/zsh</code> 命令绑定一个 Shell，这样在新打开的 Shell 里面执行任何命令都是通过代理的。</p><p>Q: 那么老师……<br>A: 好了好了，你去吧。</p><h4 id="其三（ShadowsocksR-libev）"><a href="#其三（ShadowsocksR-libev）" class="headerlink" title="其三（ShadowsocksR-libev）:"></a>其三（ShadowsocksR-libev）:</h4><h3 id="4、配置-GPG-和-SSH"><a href="#4、配置-GPG-和-SSH" class="headerlink" title="4、配置 GPG 和 SSH"></a>4、配置 GPG 和 SSH</h3><p>首先导入 GPG 公钥和私钥，然后设为绝对信任（什么？连自己的公钥都不设绝对信任是人吗？）</p><pre class="line-numbers language-bash"><code class="language-bash">gpg --import <span class="token operator">&lt;</span>path/to/your/public_gpg_key<span class="token operator">></span> <span class="token operator">&lt;</span>path/to/your/secret_gpg_key<span class="token operator">></span><span class="token comment" spellcheck="true"># 接下来绝对信任自己的公钥</span>gpg --edit-key <span class="token operator">&lt;</span>公钥ID<span class="token operator">></span>gpg<span class="token operator">></span> trust<span class="token comment" spellcheck="true"># 选择绝对信任</span>gpg<span class="token operator">></span> quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建 <code>~/.ssh</code> 文件夹，把自己的 SSH 私钥丢进去，通通 <code>chmod 600</code> 确保安全（不执行的话，连服务器会被拒）<br>然后创建 <code>config</code> 文件，按照下面的格式写入配置</p><pre class="line-numbers language-bash"><code class="language-bash">HostName b <span class="token comment" spellcheck="true"># 配置完毕就可以 使用 `ssh b` 连接主机了</span>Host ssh.baidu.com <span class="token comment" spellcheck="true"># 你的主机地址</span>User li <span class="token comment" spellcheck="true"># 你的主机用户名</span>Port 22 <span class="token comment" spellcheck="true"># 一般是22，不写默认也是22</span>IdentityFile <span class="token operator">&lt;</span>path/to/your/ssh_secret_key<span class="token operator">></span> <span class="token comment" spellcheck="true"># 指向你的私钥</span><span class="token comment" spellcheck="true"># 再来一个 Github 的</span>Host github.comUser <span class="token function">git</span>IdentityFile ~/.ssh/Git_Anapopo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后是配置 git，由于直接敲指令太麻烦，所以我一般都是事先备份好 <code>dotfiles</code>，然后安装的时候直接软链接，<br>这里直接对 Commits 开启了 GPG 签名，以确保 Commits 确实是我本人提交的（虽然感觉没有人会冒充我，还给我提交Commits QAQ）。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建 `~/.gitconfig` 文件</span><span class="token punctuation">[</span>user<span class="token punctuation">]</span>    email <span class="token operator">=</span> <span class="token operator">&lt;</span>your_email<span class="token operator">></span>    name <span class="token operator">=</span> <span class="token operator">&lt;</span>your_name<span class="token operator">></span>    signingkey <span class="token operator">=</span> <span class="token operator">&lt;</span>your_short_key_id<span class="token operator">></span><span class="token punctuation">[</span>commit<span class="token punctuation">]</span>    gpgsign <span class="token operator">=</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、配置主题环境"><a href="#5、配置主题环境" class="headerlink" title="5、配置主题环境"></a>5、配置主题环境</h3><p>首先创建用户本地主题文件夹 <code>~/.themes</code>、<code>~/.icons</code>，然后打开 Gnome-Look <a href="https://www.gnome-look.org/browse/cat/135/ord/latest/" target="_blank" rel="noopener">官网</a>，挑选你喜欢的主题、图标、光标等，把它下载下来解压。主题<strong>文件夹</strong>丢进 <code>~/.themes</code>，光标和图标<strong>文件夹</strong>丢进 <code>~/.icons</code>里面。</p><p><img src="https://i.loli.net/2018/09/19/5ba20495190fe.png" alt=""></p><p>然后运行 <code>gnome-tweaks</code> 命令开主题设置，选择需要的主题。</p><p><img src="https://i.loli.net/2018/09/19/5ba2058c86c1e.png" alt=""></p><p>最后，大功告成，享受 Ubuntu 带来的快乐吧~（重装了两次，双份的快乐。）</p><p><img src="https://i.loli.net/2018/09/19/5ba2071ee106e.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先打开&lt;a href=&quot;https://mirrors4.tuna.tsinghua.edu.cn/help/ubuntu/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;「清华大学镜像站」&lt;/a&gt;，获取 Ubuntu 的国内镜像地址。不要问我为什么用清华镜像源，因为主页看起来很&lt;del&gt;可口&lt;/del&gt;漂亮，速度比较快。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://blog.kiko.space/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>修复 Arch Linux 下 Typora 段错误</title>
    <link href="https://blog.kiko.space/2018/08/12/fix-typora-segmentation-fault/"/>
    <id>https://blog.kiko.space/2018/08/12/fix-typora-segmentation-fault/</id>
    <published>2018-08-12T11:30:42.000Z</published>
    <updated>2018-10-28T08:02:36.165Z</updated>
    
    <content type="html"><![CDATA[<h3 id="段错误问题"><a href="#段错误问题" class="headerlink" title="段错误问题"></a>段错误问题</h3><p>你是一名资深的 Arch Linux 用户，你喜欢经常更新系统。<br>而且你还是一名热爱写作的 Typora 用户。<br>那么问题产生了。</p><a id="more"></a><p>在最近一次更新系统后，启动 Typora 时会报 <ruby><rb>段错误</rb><rp>(</rp><rt>Segmentation Fault</rt><rp>)</rp></ruby>。<br>经过一番查阅 <a href="https://github.com/typora/typora-issues/issues/1671" target="_blank" rel="noopener">Issues</a> 后，发现报错原因在于 <code>glibc</code> 。<br>各位可以查看一下版本号 <code>2.28-4-x86_64</code><br>于是使用降级工具将 <code>glibc</code> 降级到 <code>2.27-3-x86_64</code>即可，等待新版本修复吧。<br>困扰了多天的问题终于解决了。</p><pre class="line-numbers language-bash"><code class="language-bash">yay -S downgradedowngrade glibc<span class="token comment" spellcheck="true"># 选择版本 2.27-3-x86_64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="方案来源"><a href="#方案来源" class="headerlink" title="方案来源"></a>方案来源</h3><ul><li><a href="https://github.com/typora/typora-issues/issues/1671" target="_blank" rel="noopener">Typora Issues</a></li><li><a href="https://bugs.archlinux.org/task/59550" target="_blank" rel="noopener">glibc 2.28 cause core dump on electron based apps</a></li></ul><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>我又回来了，因为降级了版本后，依赖于 <code>GLIBC_2.28</code> 的 <code>libQt5Core.so</code> 无法运行，导致 <code>sddm</code> 也无法运行，所以我连桌面环境也进不去了。<br>于是我又把 <code>glibc</code> 的版本刷回来了 QAQ, 现在只能等 glibc 修复关于 <code>electron</code> 应用的 bug 了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;段错误问题&quot;&gt;&lt;a href=&quot;#段错误问题&quot; class=&quot;headerlink&quot; title=&quot;段错误问题&quot;&gt;&lt;/a&gt;段错误问题&lt;/h3&gt;&lt;p&gt;你是一名资深的 Arch Linux 用户，你喜欢经常更新系统。&lt;br&gt;而且你还是一名热爱写作的 Typora 用户。&lt;br&gt;那么问题产生了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="archlinux" scheme="https://blog.kiko.space/tags/archlinux/"/>
    
      <category term="typora" scheme="https://blog.kiko.space/tags/typora/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 安装 Caddy 为系统级服务</title>
    <link href="https://blog.kiko.space/2018/07/26/ubuntu-install-caddy/"/>
    <id>https://blog.kiko.space/2018/07/26/ubuntu-install-caddy/</id>
    <published>2018-07-26T03:30:00.000Z</published>
    <updated>2018-11-01T10:58:09.986Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>关于Caddy，其作为开箱即用的 HTTPS 服务器而闻名，在此便不多赘述。我根据 Caddy 官方提供的英文文档，一步一步地将 Caddy 通过 <code>linux-systemd</code> 安装至 Ubuntu 系统中。<a id="more"></a>该操作方法也适用于其他将 <code>linux-systemd</code> 作为启动管理工具的 Linux 发行版，包括 ArchLinux。</p><h3 id="下载-tar-gz-压缩包"><a href="#下载-tar-gz-压缩包" class="headerlink" title="下载 tar.gz 压缩包"></a>下载 tar.gz 压缩包</h3><p>首先打开 Caddy 官方的<a href="https://caddyserver.com/download" target="_blank" rel="noopener">下载页面</a>，选择 Linux 平台，添加插件并选择 <ruby><rb>个人协议</rb><rp>(</rp><rt>Personal License</rt><rp>)</rp></ruby>，点击开始下载。</p><p>经过龟速的下载后得到 <code>caddy_v0.XX.0_linux_amd64_personal.tar.gz</code>，然后 <code>tar zxvf</code> 解压之，记得加参数 <code>-C</code> 解压到文件夹里呢。</p><h3 id="放置-Caddy-的二进制文件"><a href="#放置-Caddy-的二进制文件" class="headerlink" title="放置 Caddy 的二进制文件"></a>放置 Caddy 的二进制文件</h3><p>拷贝压缩包中附带的 Caddy 二进制文件到 <code>/usr/local/bin</code> 并更改权限。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> /path/to/caddy /usr/local/bin<span class="token function">sudo</span> <span class="token function">chown</span> root:root /usr/local/bin/caddy<span class="token function">sudo</span> <span class="token function">chmod</span> 755 /usr/local/bin/caddy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>允许 Caddy 的二进制文件绑定端口（例如80,443）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> setcap <span class="token string">'cap_net_bind_service=+ep'</span> /usr/local/bin/caddy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="构建-Web-服务资源"><a href="#构建-Web-服务资源" class="headerlink" title="构建 Web 服务资源"></a>构建 Web 服务资源</h3><p>建立所需要的用户组、用户和文件夹，若组ID 33 被占用，可使用其他ID。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">groupadd</span> -g 33 www-data<span class="token function">sudo</span> <span class="token function">useradd</span> \  -g www-data --no-user-group \  --home-dir /var/www --no-create-home \  --shell /usr/sbin/nologin \  --system --uid 33 www-data<span class="token function">sudo</span> <span class="token function">mkdir</span> /etc/caddy<span class="token function">sudo</span> <span class="token function">chown</span> -R root:www-data /etc/caddy<span class="token function">sudo</span> <span class="token function">mkdir</span> /etc/ssl/caddy<span class="token function">sudo</span> <span class="token function">chown</span> -R root:www-data /etc/ssl/caddy<span class="token function">sudo</span> <span class="token function">chmod</span> 0770 /etc/ssl/caddy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正确放置 <code>Caddyfile</code> 文件并设置权限</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> /path/to/Caddyfile /etc/caddy/<span class="token function">sudo</span> <span class="token function">chown</span> www-data:www-data /etc/caddy/Caddyfile<span class="token function">sudo</span> <span class="token function">chmod</span> 444 /etc/caddy/Caddyfile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建网站根目录文件夹</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> /var/www<span class="token function">sudo</span> <span class="token function">chown</span> www-data:www-data /var/www<span class="token function">sudo</span> <span class="token function">chmod</span> 555 /var/www<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>添加如下配置至 <code>Caddyfile</code></p><pre class="line-numbers language-Caddyfile"><code class="language-Caddyfile">example.com {    root /var/www/example.com    ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置-Systemd-服务单元"><a href="#配置-Systemd-服务单元" class="headerlink" title="配置 Systemd 服务单元"></a>配置 Systemd 服务单元</h3><p>安装 <code>systemd</code> 服务单元，重启  <code>systemd</code> 并启动 Caddy</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> https://raw.githubusercontent.com/mholt/caddy/master/dist/init/linux-systemd/caddy.service<span class="token function">sudo</span> <span class="token function">cp</span> caddy.service /etc/systemd/system/<span class="token function">sudo</span> <span class="token function">chown</span> root:root /etc/systemd/system/caddy.service<span class="token function">sudo</span> <span class="token function">chmod</span> 644 /etc/systemd/system/caddy.service<span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl start caddy.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>允许 Caddy 服务开机启动</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token function">enable</span> caddy.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若 Caddy 没有成功启动，则可以查看日志来排查引起错误的原因。</p><pre class="line-numbers language-bash"><code class="language-bash">journalctl --boot -u caddy.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最后往系统中添加的文件如下</p><pre><code>/usr/local/bin/caddy/etc/systemd/system/caddy.service/etc/ssl/caddy</code></pre><p>For Debug</p><pre><code>ls -al $(which caddy)pacman -Ql caddy-full-bin # For Arch Linuxjournalctl -xeu caddy --priority 5 --no-pager --no-hostnamesystemctl cat caddy</code></pre><ul><li>Caddy 可以通过 <code>systemctl</code> 进行重启、自启管理等操作</li><li>Caddy 的配置文件位于 <code>/etc/caddy/Caddyfile</code></li><li>Caddy 的网站目录位于 <code>/var/www</code></li><li>可通过 <code>systemctl status caddy</code>查看 Caddy 的运行状态</li></ul><h3 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h3><p><a href="https://raw.githubusercontent.com/mholt/caddy/master/dist/init/linux-systemd/README.md" target="_blank" rel="noopener">Caddy 官方英文教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;关于Caddy，其作为开箱即用的 HTTPS 服务器而闻名，在此便不多赘述。我根据 Caddy 官方提供的英文文档，一步一步地将 Caddy 通过 &lt;code&gt;linux-systemd&lt;/code&gt; 安装至 Ubuntu 系统中。
    
    </summary>
    
    
      <category term="caddy" scheme="https://blog.kiko.space/tags/caddy/"/>
    
      <category term="systemd" scheme="https://blog.kiko.space/tags/systemd/"/>
    
  </entry>
  
  <entry>
    <title>记一次手动解码「LEB128」压缩数据</title>
    <link href="https://blog.kiko.space/2018/05/21/leb128-decode/"/>
    <id>https://blog.kiko.space/2018/05/21/leb128-decode/</id>
    <published>2018-05-21T08:17:02.000Z</published>
    <updated>2018-11-01T10:49:05.849Z</updated>
    
    <content type="html"><![CDATA[<p>几天前因为一个项目需要用到「Google」的<a href="https://developers.google.com/protocol-buffers/" target="_blank" rel="noopener">Protocol Buffers</a>，在项目页找了一圈也没有提供 <code>Bash</code> 版本的编码器和解码器，于是想到按照官方文档给出的数据结构手动解码 <ruby><rb>二进制数据流</rb><rp>(</rp><rt>Binary Data Stream</rt><rp>)</rp></ruby>。<br><a id="more"></a></p><h2 id="解码流程"><a href="#解码流程" class="headerlink" title="解码流程"></a>解码流程</h2><ol><li>假设接收到的数据为 <code>0xDADBFE01</code></li><li>首先转为二进制，每8位bit位为一组，得到 <code>(1101 1010) (1101 1011) (1111 1110) (0000 0001)</code></li><li>每组数据除去首位，得到 <code>(101 1010) (101 1011) (111 1110) (000 0001)</code></li><li>左右调换组的顺序，得到 <code>(000 0001) (111 1110) (101 1011) (101 1010)</code></li><li>最后将二进制转回十进制即可得到 <ruby><rb>整型</rb><rp>(</rp><rt>Integer</rt><rp>)</rp></ruby> <code>4173274</code></li></ol><h2 id="写成脚本大概这样"><a href="#写成脚本大概这样" class="headerlink" title="写成脚本大概这样"></a>写成脚本大概这样</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#/bin/zsh</span>_BIN<span class="token operator">=</span><span class="token string">"0x01FEDBDA"</span>_A<span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>$_BIN <span class="token operator">>></span> <span class="token number">24</span> <span class="token operator">&amp;</span> <span class="token number">0x7f</span><span class="token variable">))</span></span>_B<span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token punctuation">(</span>$_BIN <span class="token operator">&amp;</span> <span class="token number">0x00ff0000</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">16</span> <span class="token operator">&amp;</span> <span class="token number">0x7f</span><span class="token variable">))</span></span>_C<span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token punctuation">(</span>$_BIN <span class="token operator">&amp;</span> <span class="token number">0x0000ff00</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">8</span> <span class="token operator">&amp;</span> <span class="token number">0x7f</span><span class="token variable">))</span></span>_D<span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>$_BIN <span class="token operator">&amp;</span> <span class="token number">0x000000ff</span> <span class="token operator">&amp;</span> <span class="token number">0x7f</span><span class="token variable">))</span></span>_OUT<span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>$_A <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">21</span><span class="token punctuation">)</span> <span class="token operator">+</span> $_B <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">+</span> $_C <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> $_D<span class="token variable">))</span></span><span class="token keyword">echo</span> <span class="token string">"OUT:"</span> <span class="token variable">$_OUT</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://en.wikipedia.org/wiki/LEB128" target="_blank" rel="noopener">LEB128</a></li><li><a href="https://github.com/allegro/php-protobuf/" target="_blank" rel="noopener">php-protobuf</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/encoding" target="_blank" rel="noopener">Encoding | Google Developers</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;几天前因为一个项目需要用到「Google」的&lt;a href=&quot;https://developers.google.com/protocol-buffers/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Protocol Buffers&lt;/a&gt;，在项目页找了一圈也没有提供 &lt;code&gt;Bash&lt;/code&gt; 版本的编码器和解码器，于是想到按照官方文档给出的数据结构手动解码 &lt;ruby&gt;&lt;rb&gt;二进制数据流&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;Binary Data Stream&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;。&lt;br&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://blog.kiko.space/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>MoriColor-For-Hexo 开发手记</title>
    <link href="https://blog.kiko.space/2018/05/17/moricolor-development/"/>
    <id>https://blog.kiko.space/2018/05/17/moricolor-development/</id>
    <published>2018-05-17T15:03:47.000Z</published>
    <updated>2018-10-28T12:00:36.483Z</updated>
    
    <content type="html"><![CDATA[<p>这里记载了 <code>MoriColor For Hexo</code> 的详细参数、开发日志和感谢列表等。<br><ruby><rb>超電磁砲</rb><rp>(</rp><rt>レールガン</rt><rp>)</rp></ruby></p><a id="more"></a><h3 id="文章页参数"><a href="#文章页参数" class="headerlink" title="文章页参数"></a>文章页参数</h3><table><thead><tr><th>元素</th><th>字号</th></tr></thead><tbody><tr><td>正文</td><td>1.7rem</td></tr><tr><td>引用</td><td>1.5rem</td></tr><tr><td>代码块</td><td>1.4rem</td></tr><tr><td>版权</td><td>1.5rem</td></tr></tbody></table><h3 id="Changelog"><a href="#Changelog" class="headerlink" title="Changelog"></a>Changelog</h3><h4 id="2018-07-28"><a href="#2018-07-28" class="headerlink" title="2018-07-28"></a>2018-07-28</h4><ul><li>逐渐去 JQuery 化，添加 <code>thumbnail</code><h4 id="2018-07-14"><a href="#2018-07-14" class="headerlink" title="2018-07-14"></a>2018-07-14</h4></li><li>修改文章目录样式</li><li>调整 <ruby><rb>文章页</rb><rp>(</rp><rt>Post</rt><rp>)</rp></ruby> 结构<h4 id="2018-05-28"><a href="#2018-05-28" class="headerlink" title="2018-05-28"></a>2018-05-28</h4></li><li>添加 <ruby><rb>时间线</rb><rp>(</rp><rt>Timeline</rt><rp>)</rp></ruby></li><li>模仿 <code>VSCode</code> 重写代码块</li><li>实验性地为代码块添加 <ruby><rb>工具栏</rb><rp>(</rp><rt>Toolbar</rt><rp>)</rp></ruby></li><li>添加 <ruby><rb>友情链接</rb><rp>(</rp><rt>Friends Link</rt><rp>)</rp></ruby> 页面</li></ul><h4 id="2018-05-25"><a href="#2018-05-25" class="headerlink" title="2018-05-25"></a>2018-05-25</h4><ul><li>调整 <ruby><rb>主页</rb><rp>(</rp><rt>Home</rt><rp>)</rp></ruby> 和<ruby><rb>文章页面</rb><rp>(</rp><rt>Post</rt><rp>)</rp></ruby> 布局</li><li>优化 <code>bottom-tools</code> 元素布局</li><li>将文章页面内标签移至左侧</li><li>实验性地添加文章目录，目前处于隐藏状态</li><li>调整 <ruby><rb>引用块</rb><rp>(</rp><rt>Blockquote</rt><rp>)</rp></ruby> 样式</li></ul><h4 id="2018-05-24"><a href="#2018-05-24" class="headerlink" title="2018-05-24"></a>2018-05-24</h4><ul><li>调优 <ruby><rb>主页</rb><rp>(</rp><rt>Home</rt><rp>)</rp></ruby> 元素布局</li></ul><h4 id="2018-05-21"><a href="#2018-05-21" class="headerlink" title="2018-05-21"></a>2018-05-21</h4><ul><li>更换<code>Ruby</code>插件为<code>hexo-tag-ruby</code></li><li>修复代码高亮异常的<ruby><rb>渲染</rb><rp>(</rp><rt>Render</rt><rp>)</rp></ruby>问题</li><li>解决代码高亮丢失行首空格的问题</li></ul><h4 id="2018-05-20"><a href="#2018-05-20" class="headerlink" title="2018-05-20"></a>2018-05-20</h4><ul><li>重写代码块样式，添加官方 HighLight.js 支持</li></ul><h4 id="2018-05-18"><a href="#2018-05-18" class="headerlink" title="2018-05-18"></a>2018-05-18</h4><ul><li>使代码块适应代码宽度</li><li>添加文章出处声明</li><li>自动在中文与英文字符中插入一个半角空格</li><li>使用 <code>hexo-ruby-character</code> 为 <ruby><rb>中文</rb><rp>(</rp><rt>Chinese</rt><rp>)</rp></ruby> 添加注音功能</li><li>添加 <ruby><rb>表格</rb><rp>(</rp><rt>Table</rt><rp>)</rp></ruby> 样式</li><li>添加 Chrome 标签栏主题色</li></ul><h4 id="2018-05-17"><a href="#2018-05-17" class="headerlink" title="2018-05-17"></a>2018-05-17</h4><ul><li>引入 <code>Zoom.js</code> 用于图片缩放</li><li>添加上一篇、下一篇文章跳转</li><li>添加灰度背景图像，<code>/* 灰度背景样式来自于 https://imjad.cn/ */</code></li><li>部分透明化文章页面中的代码<code>pre</code>部分</li><li>微调文章正文、引用、代码块的字号</li></ul><h3 id="Credits"><a href="#Credits" class="headerlink" title="Credits"></a>Credits</h3><ul><li><a href="https://yumoe.com/" target="_blank" rel="noopener">森の色</a></li><li><a href="https://imjad.cn/" target="_blank" rel="noopener">猫与向日葵</a></li><li><a href="https://blog.nfz.moe/" target="_blank" rel="noopener">neoFelhz’s Blog</a></li><li><a href="https://blog.lwl12.com/read/hitokoto-api.html" target="_blank" rel="noopener">LWL Hitokoto API</a></li><li><a href="http://mastermay.github.io/text-autospace.js/" target="_blank" rel="noopener">text-autospace</a></li><li><a href="https://imjad.cn/archives/code/markdown-ruby-tag-extension-plugin-test/" target="_blank" rel="noopener">Markdown Ruby 标签拓展插件测试</a></li><li><a href="https://github.com/JamesPan/hexo-ruby-character/" target="_blank" rel="noopener">hexo-ruby-character</a></li><li><a href="http://www.ahonn.me/2016/12/15/create-a-hexo-theme-from-scratch/" target="_blank" rel="noopener">从零开始制作 Hexo 主题</a></li><li><a href="http://blog.geekaholic.cn/2017/03/06/%E5%88%B6%E4%BD%9CHexo%E4%B8%BB%E9%A2%98%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%EF%BC%882%EF%BC%89/" target="_blank" rel="noopener">制作Hexo主题详细教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里记载了 &lt;code&gt;MoriColor For Hexo&lt;/code&gt; 的详细参数、开发日志和感谢列表等。&lt;br&gt;&lt;ruby&gt;&lt;rb&gt;超電磁砲&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;レールガン&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="theme" scheme="https://blog.kiko.space/tags/theme/"/>
    
  </entry>
  
  <entry>
    <title>为 Arch Linux 安装搜狗输入法</title>
    <link href="https://blog.kiko.space/2018/05/10/archlinux-install-fcitx/"/>
    <id>https://blog.kiko.space/2018/05/10/archlinux-install-fcitx/</id>
    <published>2018-05-10T10:23:10.000Z</published>
    <updated>2018-10-28T11:33:52.443Z</updated>
    
    <content type="html"><![CDATA[<p>折腾过「Ibus」，受不了「Ibus」丑陋的界面，最后还是滚回了「Fcitx」，因为皮肤实在是太好看了~(≧▽≦)/~啦啦啦。</p><a id="more"></a><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><ul><li>直接从官方仓库 [archlinuxcn] 安装</li></ul><pre class="line-numbers language-bash"><code class="language-bash">yaourt -S fcitx fcitx-im fcitx-sogoupinyin kcm-fcitx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>配置输入法，编辑 <code>~/.xprofile</code>，加入如下内容：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> GTK_IM_MODULE<span class="token operator">=</span>fcitx<span class="token function">export</span> QT_IM_MODULE<span class="token operator">=</span>fcitx<span class="token function">export</span> XMODIFIERS<span class="token operator">=</span>@im<span class="token operator">=</span>fcitxfcitx -d -r --enable sogou-qimpanel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样配置的话，同时能在GTK界面和QT界面中使用输入法。</p><ul><li>接着从 [AUR] 安装我打包的「柔兰」皮肤</li></ul><pre class="line-numbers language-bash"><code class="language-bash">yaourt -S sogoupinyin-skin-roulan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装后直接在搜狗输入法设置里选择皮肤「roulan」就好了，请享用~</p><p><a href="https://pinyin.sogou.com/skins/detail/view/info/559973" target="_blank" rel="noopener">皮肤来源</a> <a href="https://aur.archlinux.org/packages/sogoupinyin-skin-roulan/" target="_blank" rel="noopener">AUR地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;折腾过「Ibus」，受不了「Ibus」丑陋的界面，最后还是滚回了「Fcitx」，因为皮肤实在是太好看了~(≧▽≦)/~啦啦啦。&lt;/p&gt;
    
    </summary>
    
    
      <category term="archlinux" scheme="https://blog.kiko.space/tags/archlinux/"/>
    
  </entry>
  
  <entry>
    <title>「MoriColor」一款移植自 Typecho 的 Hexo 主题</title>
    <link href="https://blog.kiko.space/2018/04/21/moricolor-for-hexo/"/>
    <id>https://blog.kiko.space/2018/04/21/moricolor-for-hexo/</id>
    <published>2018-04-21T14:24:18.000Z</published>
    <updated>2018-10-28T11:59:14.816Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到一款 Typecho 主题 <a href="https://github.com/txperl/Moricolor-for-Typecho" target="_blank" rel="noopener">Moricolor</a> ，很是喜欢，但我的博客是基于 Hexo 构建的，自然是不能通用的，于是学习了一下 Hexo 主题开发，简单地制作了这个主题样式的 Hexo 版本。</p><a id="more"></a><blockquote><p>当然你现在看到的博客主题就是这个 Moricolor 了，不过目前还处于 <ruby><rb>兼容性优化</rb><rp>(</rp><rt>小白学习</rt><rp>)</rp></ruby> 阶段，<del>暂不公开 Github 项目，等到 TODO 差不多完成的时候就开源。</del>已经开源<a href="https://github.com/Anapopo/Moricolor-for-Hexo" target="_blank" rel="noopener">戳我</a></p></blockquote><h3 id="To-Do-List"><a href="#To-Do-List" class="headerlink" title="To-Do List"></a>To-Do List</h3><ul><li>PWA化</li><li>封面图</li><li>修改部分静态资源的 CDN ，比如字体、Material Icon 等</li><li>首页分页的样式</li></ul><h3 id="优化说明"><a href="#优化说明" class="headerlink" title="优化说明"></a>优化说明</h3><ul><li>修改「Archive」和「Tag」页面的标签颜色</li><li>修改文章页面上方标签和时间显示样式</li><li>Zoom.js 图片缩放</li><li>文章上一页、下一页显示</li></ul><p>更加详细的开发日志参见<a href="https://blog.kiko.space/2018/05/17/moricolor-development/">此处</a></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://hexo.io/zh-cn/docs/variables.html" target="_blank" rel="noopener">Hexo 变量</a></li><li><a href="https://hexo.io/zh-cn/docs/helpers.html" target="_blank" rel="noopener">Hexo 辅助函数</a></li><li><a href="https://ejs.bootcss.com/" target="_blank" rel="noopener">EJS 模板语言</a></li></ul><h3 id="Credits"><a href="#Credits" class="headerlink" title="Credits"></a>Credits</h3><blockquote><p>本程序源代码可任意修改并任意使用，但禁止商业化用途。<br>一旦使用，任何不可知事件都与原作者无关，原作者不承担任何后果。<br>如果您喜欢，希望可以在页面某处保留原作者 <a href="https://github.com/txperl" target="_blank" rel="noopener">Trii Hsia</a> 版权信息。<br>感谢。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看到一款 Typecho 主题 &lt;a href=&quot;https://github.com/txperl/Moricolor-for-Typecho&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Moricolor&lt;/a&gt; ，很是喜欢，但我的博客是基于 Hexo 构建的，自然是不能通用的，于是学习了一下 Hexo 主题开发，简单地制作了这个主题样式的 Hexo 版本。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://blog.kiko.space/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>「Arch Linux」配置之磁盘分区</title>
    <link href="https://blog.kiko.space/2018/04/11/archlinux-setup-partition/"/>
    <id>https://blog.kiko.space/2018/04/11/archlinux-setup-partition/</id>
    <published>2018-04-11T13:24:01.000Z</published>
    <updated>2018-10-28T08:02:36.162Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇 「GNU/Linux」 新手的 「Arch Linux」 磁盘分区完全指南。</p><a id="more"></a><blockquote><p>下载镜像和虚拟机加载部分另开一篇再讲，这篇着重于磁盘分区时遇到的坑。</p></blockquote><h4 id="Startup"><a href="#Startup" class="headerlink" title="Startup"></a>Startup</h4><p>分区前先看看磁盘状态<code>lsblk -f</code>  </p><pre class="line-numbers language-plaintext"><code class="language-plaintext">NAME      FSTYPE     LABEL        UUID                     MOUNTPOINTloop0     squashfs                                         /run/archiso/sfs/airootfssdasr0       iso9660    ARCH_201804  2018-04-01-05-06-08-00   /run/archiso/bootmnt...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>fdisk /dev/sda</code> 后输入 <code>m</code> 查看帮助  </p><pre class="line-numbers language-plaintext"><code class="language-plaintext">Help:  DOS (MBR)   a   toggle a bootable flag   b   edit nested BSD disklabel   c   toggle the dos compatibility flag  Generic   d   delete a partition   F   list free unpartitioned space   l   list known partition types   n   add a new partition   p   print the partition table   t   change a partition type   v   verify the partition table   i   print information about a partition  Misc   m   print this menu   u   change display/entry units   x   extra functionality (experts only)  Script   I   load disk layout from sfdisk script file   O   dump disk layout to sfdisk script file  Save & Exit   w   write table to disk and exit   q   quit without saving changes  Create a new label   g   create a new empty GPT partition table   G   create a new empty SGI (IRIX) partition table   o   create a new empty DOS partition table   s   create a new empty Sun partition table<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>列出几个常用的命令：</p><ul><li><strong>g</strong> 初始化 GPT 分区表</li><li><strong>n</strong> 添加新分区</li><li><strong>d</strong> 删除分区</li><li><strong>t</strong> 修改分区类型</li></ul><h4 id="Partition-For-BIOS"><a href="#Partition-For-BIOS" class="headerlink" title="Partition For BIOS"></a>Partition For BIOS</h4><ol><li>初始化 GPT 磁盘分区表</li></ol><pre class="line-numbers language-bash"><code class="language-bash">Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: gCreated a new GPT disklabel <span class="token punctuation">(</span>GUID: ECE79DD4-88DF-4D4D-82F2-D665816100AD<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>建立 <code>BIOS boot</code> 分区</li></ol><pre class="line-numbers language-bash"><code class="language-bash">Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: nPartition number <span class="token punctuation">(</span>1-128, default 1<span class="token punctuation">)</span>: 1First sector <span class="token punctuation">(</span>2048-16777182, default 2048<span class="token punctuation">)</span>: 2048Last sector, +sector or +size<span class="token punctuation">{</span>K,M,G,T,P<span class="token punctuation">}</span> <span class="token punctuation">(</span>2048-16777215, default 16777215<span class="token punctuation">)</span>: +1MCreated a new partition 1 of <span class="token function">type</span> <span class="token string">'Linux filesystem'</span> and of size 1 MiB.Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: tSelected partition 1Partition <span class="token function">type</span> <span class="token punctuation">(</span>type L to list all types<span class="token punctuation">)</span>: 4Changed typeof partition <span class="token string">'Linux filesystem'</span> to <span class="token string">'BIOS boot'</span><span class="token keyword">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>建立 <code>SWAP</code> 分区</li></ol><pre class="line-numbers language-bash"><code class="language-bash">Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: nPartition number <span class="token punctuation">(</span>2-128, default 2<span class="token punctuation">)</span>: 2First sector <span class="token punctuation">(</span>4096-16777182, default 4096<span class="token punctuation">)</span>: 4096Last sector, +sector or +size<span class="token punctuation">{</span>K,M,G,T,P<span class="token punctuation">}</span> <span class="token punctuation">(</span>4096-16777215, default 16777215<span class="token punctuation">)</span>: +2GCreated a new partition 2 of <span class="token function">type</span> <span class="token string">'Linux filesystem'</span> and of size 2 GiB.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>建立 <code>Linux</code> 文件系统</li></ol><pre class="line-numbers language-bash"><code class="language-bash">Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: nPartition number <span class="token punctuation">(</span>3-128, default 3<span class="token punctuation">)</span>: 3First sector <span class="token punctuation">(</span>4198400-16777182, default 4198400<span class="token punctuation">)</span>: 4198400Last sector, +sector or +size<span class="token punctuation">{</span>K,M,G,T,P<span class="token punctuation">}</span> <span class="token punctuation">(</span>4198400-16777215, default 16777215<span class="token punctuation">)</span>:Created a new partition 3 of <span class="token function">type</span> <span class="token string">'Linux filesystem'</span> and of size 6 GiB.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>写入分区表</li></ol><pre class="line-numbers language-bash"><code class="language-bash">Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: wThe partition table has been altered.Calling ioctl<span class="token punctuation">(</span><span class="token punctuation">)</span> to re-read partition table.Syncing disks.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>格式化磁盘</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 先查看目前分区表</span><span class="token comment" spellcheck="true"># fdisk -l</span><span class="token punctuation">..</span>.Device      Start       End    Sectors    Size    Type/dev/sda1    2048      4095       2048      1M    BIOS boot/dev/sda2    4096   4198399    4194304      2G    Linux filesystem/dev/sda3 4198400  16777182   12578783      6G    Linux filesystem<span class="token punctuation">..</span>.<span class="token comment" spellcheck="true"># 格式化磁盘</span><span class="token comment" spellcheck="true"># mkfs.ext4 /dev/sda3</span><span class="token punctuation">..</span>.省略输出<span class="token punctuation">..</span>.<span class="token comment" spellcheck="true"># 建立Swap区</span><span class="token comment" spellcheck="true"># mkswap /dev/sda2</span><span class="token punctuation">..</span>.<span class="token comment" spellcheck="true"># swapon /dev/sda2</span><span class="token punctuation">..</span>.<span class="token comment" spellcheck="true"># 查看分区表</span><span class="token comment" spellcheck="true"># lsblk -f</span>NAME      FSTYPE       LABEL   UUID   MOUNTPOINT<span class="token punctuation">..</span>.sda├── sda1 ├── sda2   swap├── sda3   ext4  ARCH_201804<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Partition-For-UEFI"><a href="#Partition-For-UEFI" class="headerlink" title="Partition For UEFI"></a>Partition For UEFI</h4><p>类似地分区如下</p><pre class="line-numbers language-shell"><code class="language-shell">Name         Size    Type/dev/sda1    512M    EFI System/dev/sda2    2G      SWAP/dev/sda3    118G    Linux File System<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h4><p>这里建立 <code>BIOS boot</code> 分区是为了后面 <code>grub</code> 的安装。<del>我才不会说我因为这个重新安装了三遍呢</del><br>根据官方 Wiki 的说明：</p><blockquote><p>安装 GRUB 前，在一个没有文件系统的磁盘上，用 fdisk 或 gdisk 创建一个 +1M 分区，设置为 BIOS boot 类型，在 fdisk 中的类型号是 4, 在 gdisk 中的类型是 ef02，在 parted 中是 bios_grub。此分区可以在磁盘前 2TB 的任何位置。分区建立好后，按下面的命令安装启动管理器。</p></blockquote><p>如果没有 <code>BIOS boot</code> 分区，在执行 <code>grub-install</code> 时将会报错QAQ</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># grub-install --target=i386-pc /dev/sda</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://blog.yoitsu.moe/arch-linux/installing_arch_linux_for_complete_newbies.html" target="_blank" rel="noopener">给 GNU/Linux 萌新的 Arch Linux 安装指南</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇 「GNU/Linux」 新手的 「Arch Linux」 磁盘分区完全指南。&lt;/p&gt;
    
    </summary>
    
    
      <category term="archlinux" scheme="https://blog.kiko.space/tags/archlinux/"/>
    
  </entry>
  
  <entry>
    <title>如何实现渐变直线</title>
    <link href="https://blog.kiko.space/2018/04/03/draw-a-gradient-line/"/>
    <id>https://blog.kiko.space/2018/04/03/draw-a-gradient-line/</id>
    <published>2018-04-02T16:41:56.000Z</published>
    <updated>2018-10-28T08:02:36.164Z</updated>
    
    <content type="html"><![CDATA[<p>这里的直线要求渐变，因此使用 <code>MoveTo</code> 和 <code>LineTo</code> 画线是行不通的，我们需要手动实现<strong>点动成线</strong>。之前计算机图形学研究过 DDA 画线算法和中点画线算法，下面就简单改一改拿来画线了。</p><a id="more"></a><p>先来道应用题：<br>假如一条线有512个点，要实现从黄色 RGB(255,255,0) 渐变到白色 RGB(255,255,255) 。这里涉及到一些映射的概念，在于将256种颜色分布到512个点上。大概可以得到以下的数学公式：</p><p><strong>pixel_color / pixel_order = color_count / pixel_count</strong></p><p>看不懂的话，再来用分组的思想来看，把512个像素点分成256组，每组分得2个点。设「dotX」为这些像素点中的第X个，用<code>X/2</code>就可以得出「dotX」属于第<strong>几</strong>组，这里的「几」就是它对应的颜色。</p><p>画线是按点进行 <code>SetPixel</code> 的，可以想象纸带打孔机工作时的状态，所以只要找出点和颜色的对应关系就好了。有如下函数 <code>getColorByOrder</code> ，输入点的次序，输出点应有的颜色。下面就来写这个函数：</p><pre class="line-numbers language-clike"><code class="language-clike">COLORREF <span class="token function">getColorByOrder</span><span class="token punctuation">(</span>int order<span class="token punctuation">)</span> <span class="token punctuation">{</span>    int a <span class="token operator">=</span> <span class="token number">512</span> <span class="token operator">/</span> <span class="token number">256</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">RGB</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> order <span class="token operator">/</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来把一些变量代入就可以变成通用函数了。通过以上算法亦可实现渐变矩形、多色渐变等。</p><h4 id="渐变矩形"><a href="#渐变矩形" class="headerlink" title="渐变矩形"></a>渐变矩形</h4><p><img src="https://i.loli.net/2018/04/11/5acd905c661b5.png" alt="#渐变矩形"></p><h4 id="颜色分段直线"><a href="#颜色分段直线" class="headerlink" title="颜色分段直线"></a>颜色分段直线</h4><p><img src="https://i.loli.net/2018/04/11/5acd905c679c2.png" alt="#颜色分段直线"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里的直线要求渐变，因此使用 &lt;code&gt;MoveTo&lt;/code&gt; 和 &lt;code&gt;LineTo&lt;/code&gt; 画线是行不通的，我们需要手动实现&lt;strong&gt;点动成线&lt;/strong&gt;。之前计算机图形学研究过 DDA 画线算法和中点画线算法，下面就简单改一改拿来画线了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://blog.kiko.space/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>「VIM」编辑器的配置</title>
    <link href="https://blog.kiko.space/2018/03/28/configure-my-vim/"/>
    <id>https://blog.kiko.space/2018/03/28/configure-my-vim/</id>
    <published>2018-03-28T04:22:22.000Z</published>
    <updated>2018-10-28T08:02:36.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>记录一下个人的宇宙第一编辑器「VIM」的配置过程，以防下次折腾的时候还要翻阅官方文档。<br>一般而言，Linux 系统都会默认安装 VIM ，就跳过安装了。着重记录安装Vundle作为插件管理器这部份。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>第一步，先把这个<a href="https://github.com/VundleVim/Vundle.vim.git" target="_blank" rel="noopener">项目</a>拉回家，安置在 <code>~/.vim</code> 目录下。每个用户在 <code>/home</code> 目录下都有一个以用户名命名的文件夹，<code>.vim</code> 表明该文件夹不可见。<br>接下来上拉取的代码：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="编写vim的配置文件"><a href="#编写vim的配置文件" class="headerlink" title="编写vim的配置文件"></a>编写vim的配置文件</h2><p>一些注意点：</p><ul><li>Vundle 支持通过 Git 仓库引入插件</li><li>插件的引入必须在 begin 和 end 之间</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token string">" 基础配置set nocompatiblefiletype plugin indent onset numberset encoding=utf-8set shiftwidth=2set tabstop=2set autoindentset ambiwidth=doubleset expandtabsyntax on"</span> 引入Vundle<span class="token keyword">set</span> rtp+<span class="token operator">=</span>~/.vim/bundle/Vundle.vimcall vundle<span class="token comment" spellcheck="true">#begin()</span><span class="token string">" 使用Vundle作为插件管理器Plugin 'VundleVim/Vundle.vim'"</span> 个人使用的一些插件Plugin <span class="token string">'mattn/emmet-vim'</span>Plugin <span class="token string">'vim-airline/vim-airline-themes'</span>Plugin <span class="token string">'bling/vim-airline'</span>Bundle <span class="token string">'luochen1990/rainbow'</span>call vundle<span class="token comment" spellcheck="true">#end()</span>" 以下省略了各个插件的配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>只要打开 vim 窗口，执行指令 <code>:PluginInstall</code> ，插件们就会乖乖地跑进你的文件夹啦。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;记录一下个人的宇宙第一编辑器「VIM」的配置过程，以防下次折腾的时候还要翻阅官方文档。&lt;br&gt;一般而言，Linux 系统都会默认安装 VIM ，就跳过安装了。着重记录安装Vundle作为插件管理器这部份。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://blog.kiko.space/tags/linux/"/>
    
      <category term="vim" scheme="https://blog.kiko.space/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>从 Windows 到 Linux</title>
    <link href="https://blog.kiko.space/2018/03/21/windows-to-linux/"/>
    <id>https://blog.kiko.space/2018/03/21/windows-to-linux/</id>
    <published>2018-03-21T10:03:36.000Z</published>
    <updated>2018-11-01T10:49:06.496Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><blockquote><p>于 2018.10.01 回归 Ubuntu + GNOME 了。<br>于 2018.04.15 转投「ArchLinux」+ 「KDE」怀抱了。</p></blockquote><p>终于在本周狠下心来，抛弃了臃肿不堪的「Windows 10」，投入了「Linux」和开源世界的怀抱来。 </p><a id="more"></a><h2 id="个人感受"><a href="#个人感受" class="headerlink" title="个人感受"></a>个人感受</h2><p>在已经稳稳当当地使用 <code>Ubuntu</code> 一周后，来说一些个人的使用感受。</p><ul><li>桌面清爽</li><li>命令行指令</li><li>无需清理垃圾</li><li>无需忍受弹窗</li></ul><h2 id="软件评测"><a href="#软件评测" class="headerlink" title="软件评测"></a>软件评测</h2><p>我在Linux下安装了以下软件：</p><ul><li>「VSCode」开源、优雅的代码编辑器</li><li>「网易云音乐」熟悉音乐播放器，比较良心</li><li>「搜狗输入法」中文输入法</li><li><del>「LibreOffice」文档、表格、演示样样不少</del> 还是国产的WPS Office比较符合使用习惯</li><li><del>「Wine-QQ-TIM」我还能在Linux下上QQ</del> 不太方便，还是TG大法好</li><li>「Telegram」安全、加密的聊天工具</li><li>「VLC」看视频也没问题的</li><li><del>「Gnome桌面环境」令Windows嫉妒的桌面效果</del> <del>KDE大法好</del> GNOME 大法好</li></ul><h2 id="自问自答"><a href="#自问自答" class="headerlink" title="自问自答"></a>自问自答</h2><p>Q：口亨，Windows能打游戏，Linux不能。<br>A：等等，Steam Linux版本了解一下？<a href="https://i.linuxtoy.org/docs/guide/ch06s05.html" target="_blank" rel="noopener">《开源世界旅行指南》</a>里有这么一句话：“Windows 能干而 Linux 干不了的事情，那就是不需要干的事情。”现在看来，Linux也是可以打游戏的，那么是否也证明了打游戏是需要干的事情呢（笑）。</p><p>Q：那么Windows还有什么优势呢？<br>A：目前还没发现什么优势，我在Windows下能干的事情，在Linux下都能干，相比之下甚至效率更高。  </p><p>Q：。。。<br>A：世界属于Linux，消灭Windows暴政，Windows偶尔打游戏 （逃</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;于 2018.10.01 回归 Ubuntu + GNOME 了。&lt;br&gt;于 2018.04.15 转投「ArchLinux」+ 「KDE」怀抱了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;终于在本周狠下心来，抛弃了臃肿不堪的「Windows 10」，投入了「Linux」和开源世界的怀抱来。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://blog.kiko.space/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>「OpenWrt」之编译小记</title>
    <link href="https://blog.kiko.space/2017/09/28/how-to-compile-openwrt-ipk/"/>
    <id>https://blog.kiko.space/2017/09/28/how-to-compile-openwrt-ipk/</id>
    <published>2017-09-27T16:38:00.000Z</published>
    <updated>2018-10-28T11:45:21.528Z</updated>
    
    <content type="html"><![CDATA[<p>最近课堂上的专业课不好玩 ，于是入了一个破二手路由器 <code>TP-LINK WR742N</code> 折腾着玩 ，以下简称 <code>WR742</code> 。 <del>后来又入了斐讯K2路由器来折腾。</del><br>这是一款上市很久的型号了，官方固件都出到v6了，好在和 <code>WR740</code> 硬件构造上基本一样，可以直接使用 openwrt 提供的 <code>WR740</code> 的固件 , 不过光有固件不折腾折腾怎么行呢？  </p><a id="more"></a><h3 id="预期目的"><a href="#预期目的" class="headerlink" title="预期目的"></a>预期目的</h3><ul><li>自动通过 H3C 校园网 802.1x 认证 ✔</li><li>自动科学上网 ✔</li><li>免流上校园网 ✖</li></ul><p>Openwrt 官方提供编译用 SDK，无需下载整个源码即可快速编译 ipk 包。所以我只要下载 SDK 后配置好再编译就可以了。<br>来，编译几个 ipk 包试试。逛了一圈 Github ，找到能够满足 H3C 认证要求的项目 <code>njit8021xclient</code> , 满足科学上网的项目 <code>openwrt-ssr</code>。</p><h3 id="小坑小记"><a href="#小坑小记" class="headerlink" title="小坑小记"></a>小坑小记</h3><ul><li>环境内存尽可能大（采用2G内存)</li><li>内存无法满足需求可开启 swap 空间</li><li>硬盘留下足够的空间（采用30G SSD硬盘)</li><li>切换到非 root 用户执行编译操作 </li></ul><p>为保证环境纯净，就临时租用了一台 US 的主机 ，保证不会出现像国内服务器的404现象。选择按量付费 ，等编译完之后提取固件和 ipk 后留个快照就可以退掉主机了 ，十分节省软妹币和维护时间 ，我才不会说我全程都是在手机操作的呢（笑。</p><h3 id="0x00-编译环境"><a href="#0x00-编译环境" class="headerlink" title="0x00 编译环境"></a>0x00 编译环境</h3><ul><li>Ubuntu <code>16.04 xenial</code></li><li>OpenWrt SDK <code>Chaos Calmer 15.05.1</code></li><li>Platform <code>ar71xx</code></li><li>Device <code>TP-LINK WR742N Magic Version</code></li></ul><h3 id="0x01-安装依赖包"><a href="#0x01-安装依赖包" class="headerlink" title="0x01 安装依赖包"></a>0x01 安装依赖包</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> git-core build-essential libssl-dev libncurses5-dev unzip <span class="token function">gawk</span> zlib1g-dev <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="0x02-准备OpenWrt-SDK"><a href="#0x02-准备OpenWrt-SDK" class="headerlink" title="0x02 准备OpenWrt SDK"></a>0x02 准备OpenWrt SDK</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ~                                                                     <span class="token function">wget</span> https://downloads.openwrt.org/chaos_calmer/15.05.1/ar71xx/generic/OpenWrt-SDK-15.05.1-ar71xx-generic_gcc-4.8-linaro_uClibc-0.9.33.2.Linux-x86_64.tar.bz2<span class="token function">tar</span> xjf OpenWrt-SDK-ar71xx-*<span class="token function">mv</span> OpenWrt-SDK-ar71xx-* openwrt<span class="token function">cd</span> openwrt<span class="token function">cp</span> feeds.conf.default feeds.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x03-编译前配置"><a href="#0x03-编译前配置" class="headerlink" title="0x03 编译前配置"></a>0x03 编译前配置</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装 feeds</span>./scripts/feeds update packages./scripts/feeds <span class="token function">install</span> libpcre<span class="token comment" spellcheck="true"># 获取 Makefile</span><span class="token function">git</span> clone https://github.com/ywb94/openwrt-ssr.git package/openwrt-ssr<span class="token function">make</span> menuconfig<span class="token comment" spellcheck="true"># 选择要编译的包 </span><span class="token comment" spellcheck="true">#luci -> 3. Applications -> luci-app-shadowsocksR         原始版本</span><span class="token comment" spellcheck="true">#luci -> 3. Applications -> luci-app-shadowsocksR-GFW     GFWList版本</span><span class="token comment" spellcheck="true">#Network -> njit8021xclient</span><span class="token comment" spellcheck="true">#Network -> njit8021xclient-web</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x04-开始编译"><a href="#0x04-开始编译" class="headerlink" title="0x04 开始编译"></a>0x04 开始编译</h3><p><code>make package/openwrt-ssr/compile v=99</code><br>编译成功后的文件在 <code>~/openwrt/bin/target/ar71xx</code> 目录下。</p><h3 id="已知bug"><a href="#已知bug" class="headerlink" title="已知bug"></a>已知bug</h3><p>网口顺序是反着来的，即硬件上的LAN1口=软件上的WAN口，不过不影响使用，那我也反着插好了🌚。  </p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://wiki.openwrt.org/doc/howto/buildroot.exigence" target="_blank" rel="noopener">官方 Wiki</a></li><li><a href="https://wiki.openwrt.org/doc/faq/development" target="_blank" rel="noopener">官方 Development</a></li><li><a href="https://github.com/liuqun/njit8021xclient" target="_blank" rel="noopener">njit8021xclient</a></li><li><a href="https://github.com/ywb94/openwrt-ssr" target="_blank" rel="noopener">openwrt-ssr</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近课堂上的专业课不好玩 ，于是入了一个破二手路由器 &lt;code&gt;TP-LINK WR742N&lt;/code&gt; 折腾着玩 ，以下简称 &lt;code&gt;WR742&lt;/code&gt; 。 &lt;del&gt;后来又入了斐讯K2路由器来折腾。&lt;/del&gt;&lt;br&gt;这是一款上市很久的型号了，官方固件都出到v6了，好在和 &lt;code&gt;WR740&lt;/code&gt; 硬件构造上基本一样，可以直接使用 openwrt 提供的 &lt;code&gt;WR740&lt;/code&gt; 的固件 , 不过光有固件不折腾折腾怎么行呢？  &lt;/p&gt;
    
    </summary>
    
    
      <category term="openwrt" scheme="https://blog.kiko.space/tags/openwrt/"/>
    
  </entry>
  
  <entry>
    <title>获取学校图书馆大约50万藏书信息</title>
    <link href="https://blog.kiko.space/2017/08/04/how-to-get-50w-books-info/"/>
    <id>https://blog.kiko.space/2017/08/04/how-to-get-50w-books-info/</id>
    <published>2017-08-04T12:57:41.000Z</published>
    <updated>2018-10-28T08:02:36.168Z</updated>
    
    <content type="html"><![CDATA[<h3 id="事件起因"><a href="#事件起因" class="headerlink" title="事件起因"></a>事件起因</h3><p>因为我在图书馆借书后总是会忘记还书日期，有一次还因为忘记还书欠了图书馆20多软妹币 (此处捂脸QWQ)<br>于是就想着怎么地 <ruby><rb>好好学习一下</rb><rp>(</rp><rt>干他一票</rt><rp>)</rp></ruby> 图书馆官网<br>之后发现图书馆竟然用的是 <a href="https://zh.wikipedia.org/wiki/OPAC" target="_blank" rel="noopener">OPAC</a>，然后我看到了 <a href="http://blog.nudtcat.org/WebSecurity/%E6%B1%87%E6%96%87opac%E5%9B%BE%E4%B9%A6%E9%A6%86%E5%90%8E%E9%97%A8%E5%AF%BC%E8%87%B4%E6%BA%90%E7%A0%81%E6%B3%84%E6%BC%8F/" target="_blank" rel="noopener">这一篇文章</a><br>然后就<del>大费周章</del>轻而易举地 <code>dump</code> 出了学校图书馆管理软件的一些信息，并拿到了 OPAC 的源码，嗯是用<del>世界上最棒的语言</del>PHP写的。</p><a id="more"></a><h3 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h3><p>随便找了本书，先访问一下网址看看 <code>http://&lt;学校图书馆地址&gt;/opac/item.php?marc_no=0000478102</code><br>先标准般地右键审查一下，当分析 <code>HTTP Header</code> 之后，发现不需要 <code>Cookie</code> 就可以访问书籍的介绍页面。然后瞥见一个偌大的二维码！<br><img src="https://moe-static.b0.upaiyun.com/img/how-to-get-50w-books-info/qrcode.png" alt="qrcode">  </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ajax_qr.php?qrcode<span class="token punctuation">=</span>6aKY5ZCN77yaR2l054mI5pys5o6n5Yi2566h55CGDQrotKPku7vogIXvvJoo576OKSBKb24gTG9lbGlnZXIsIE1hdHRoZXcgTWNDdWxsb3VnaOiRlw0K6aaG6JeP5L%2Bh5oGvKOe0ouS5puWPty%2Fppobol4%2FlnLAv5Zyo6aaGL%2BWPr%2BeUqCnvvJoNClRQMzExLjU2LzY1MSDnp5HmioDlm77kuablgJ%2FpmIXihaHlrqQgMC8yDQo%3D<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>165<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>162<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>嗯<code>~ o(*￣▽￣*)o</code>，看来这是一个用php生成的二维码，内容就藏在<code>qrcode</code>参数里面<br>我们先把它小心翼翼地取出来呢，然后使用 php 也好，python 也好, 总之把它解码了任务就完成<br>我<del>一眼就看出来了</del>思虑良久，尝试先 <code>urldecode</code> 之后再 <code>base64_decode</code>, 最后内容就乖乖地出现了(￣▽￣)”233</p><pre class="line-numbers language-text"><code class="language-text">题名：Git版本控制管理责任者：(美) Jon Loeliger, Matthew McCullough著馆藏信息(索书号/馆藏地/在馆/可用)：TP311.56/651 科技图书借阅Ⅱ室 0/2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><p><a href="https://github.com/Anapopo/OPACHelper" target="_blank" rel="noopener">Node.JS实现查询已借阅书籍</a></p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><ul><li>实现 Cookie 过期后自动获取新 Cookie</li><li>抓取图书借阅信息</li><li>抓取50万本藏书存入数据库</li><li>通过识别验证码直接登陆图书馆</li><li>实现已借阅书籍的一键续借</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>万事开头难, 当你发现了一本书的奥秘的时候, 那么50万当然就不成问题了, 直接<code>for</code>循环就可以了, 需要的只是时间。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;事件起因&quot;&gt;&lt;a href=&quot;#事件起因&quot; class=&quot;headerlink&quot; title=&quot;事件起因&quot;&gt;&lt;/a&gt;事件起因&lt;/h3&gt;&lt;p&gt;因为我在图书馆借书后总是会忘记还书日期，有一次还因为忘记还书欠了图书馆20多软妹币 (此处捂脸QWQ)&lt;br&gt;于是就想着怎么地 &lt;ruby&gt;&lt;rb&gt;好好学习一下&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;干他一票&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 图书馆官网&lt;br&gt;之后发现图书馆竟然用的是 &lt;a href=&quot;https://zh.wikipedia.org/wiki/OPAC&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OPAC&lt;/a&gt;，然后我看到了 &lt;a href=&quot;http://blog.nudtcat.org/WebSecurity/%E6%B1%87%E6%96%87opac%E5%9B%BE%E4%B9%A6%E9%A6%86%E5%90%8E%E9%97%A8%E5%AF%BC%E8%87%B4%E6%BA%90%E7%A0%81%E6%B3%84%E6%BC%8F/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这一篇文章&lt;/a&gt;&lt;br&gt;然后就&lt;del&gt;大费周章&lt;/del&gt;轻而易举地 &lt;code&gt;dump&lt;/code&gt; 出了学校图书馆管理软件的一些信息，并拿到了 OPAC 的源码，嗯是用&lt;del&gt;世界上最棒的语言&lt;/del&gt;PHP写的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="php" scheme="https://blog.kiko.space/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>记录 Android 的编译过程</title>
    <link href="https://blog.kiko.space/2017/07/19/how-to-compile-android/"/>
    <id>https://blog.kiko.space/2017/07/19/how-to-compile-android/</id>
    <published>2017-07-19T05:14:56.000Z</published>
    <updated>2018-10-28T08:02:36.166Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00-前期准备工作"><a href="#0x00-前期准备工作" class="headerlink" title="0x00 前期准备工作"></a>0x00 前期准备工作</h4><ul><li>Ubuntu系统，内存至少8GB，硬盘至少预留100GB空间</li><li>自备梯子用于下载安卓源码或者直接前往清华大学镜像源下载</li></ul><a id="more"></a><h4 id="0x01-安装Android-SDK平台工具"><a href="#0x01-安装Android-SDK平台工具" class="headerlink" title="0x01 安装Android SDK平台工具"></a>0x01 安装Android SDK平台工具</h4><p>输入<code>adb</code>或者<code>fastboot</code>，如果提示不能使用，那就需要<a href="https://dl.google.com/android/repository/platform-tools-latest-linux.zip" target="_blank" rel="noopener">从谷歌下载</a>，解压后并添加进环境变量当中</p><h4 id="0x02-安装编译所需的依赖包"><a href="#0x02-安装编译所需的依赖包" class="headerlink" title="0x02 安装编译所需的依赖包"></a>0x02 安装编译所需的依赖包</h4><p>这里将使用到<code>apt-get</code>命令，执行前执行一次<code>apt-get update &amp;&amp; apt-get upgrade</code>用于更新依赖包列表</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">bc</span> bison build-essential curl flex g++-multilib gcc-multilib <span class="token function">git</span> gnupg gperf \imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev libesd0-dev liblz4-tool libncurses5-dev \libsdl1.2-dev libssl-dev libwxgtk3.0-dev libxml2 libxml2-utils lzop pngcrush <span class="token function">rsync</span> schedtool \squashfs-tools xsltproc <span class="token function">zip</span> zlib1g-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对于Ubuntu系统版本低于<code>16.04</code>的请把依赖包中的<code>libwxgtk3.0-dev</code>更换为<code>libwxgtk2.8-dev</code><br>Java版本则推荐安装<code>openjdk-8-jdk</code>这个依赖包</p><h4 id="0x03-创建源码安装目录"><a href="#0x03-创建源码安装目录" class="headerlink" title="0x03 创建源码安装目录"></a>0x03 创建源码安装目录</h4><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> ~/lineageos$ <span class="token function">mkdir</span> ~/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="0x04-安装repo命令"><a href="#0x04-安装repo命令" class="headerlink" title="0x04 安装repo命令"></a>0x04 安装<code>repo</code>命令</h4><p>你可能借助梯子<a href="https://storage.googleapis.com/git-repo-downloads/repo" target="_blank" rel="noopener">从谷歌下载</a>并赋予其可执行权限</p><pre class="line-numbers language-bash"><code class="language-bash">$ curl https://storage.googleapis.com/git-repo-downloads/repo <span class="token operator">></span> ~/bin/repo$ <span class="token function">chmod</span> a+x ~/bin/repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加入repo命令所在的bin文件夹至环境变量中<br>这样你就可以在任何地方执行repo命令</p><h4 id="0x05-开始拉取Android源码"><a href="#0x05-开始拉取Android源码" class="headerlink" title="0x05 开始拉取Android源码"></a>0x05 开始拉取Android源码</h4><p>拉取之前需要做一步准备工作，设置<code>Git</code>的邮箱和用户名</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> config --global user.email <span class="token string">"Your Email"</span>$ <span class="token function">git</span> config --global user.name <span class="token string">"Your Name"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行以下指令开始拉取，然后去喝杯咖啡，休息一下</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">cd</span> ~/lineagos$ repo init -u https://github.com/LineageOS/android.git -b cm-14.1$ repo <span class="token function">sync</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="0x06-准备你自己的设备文件"><a href="#0x06-准备你自己的设备文件" class="headerlink" title="0x06 准备你自己的设备文件"></a>0x06 准备你自己的设备文件</h4><p>参照如下</p><ul><li><a href="https://github.com/Anapopo/android_device_samsung_a7xltechn" target="_blank" rel="noopener">Andorid_device_samsung_a7xltechn</a></li><li><a href="https://github.com/Anapopo/android_vendor_samsung_a7xltechn" target="_blank" rel="noopener">Android_vendor_samsung_a7xltechn</a></li><li><a href="https://github.com/Anapopo/android_kernel_samsung_a7xltechn" target="_blank" rel="noopener">Android_kernel_samsung_a7xltechn</a></li></ul><h4 id="0x07-配置虚拟内存Swap"><a href="#0x07-配置虚拟内存Swap" class="headerlink" title="0x07 配置虚拟内存Swap"></a>0x07 配置虚拟内存Swap</h4><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">dd</span> if<span class="token operator">=</span>/dev/zero of<span class="token operator">=</span>/swap1 bs<span class="token operator">=</span>1M count<span class="token operator">=</span>4096$ mkswap /swap1$ swapon /swap1$ <span class="token function">chmod</span> 0600 /swap1$ vim /etc/fstab <span class="token comment" spellcheck="true"># add "/swap1 swap swap defaults 0 0" in the last row</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="0x08-配置ccache用于加快编译速度"><a href="#0x08-配置ccache用于加快编译速度" class="headerlink" title="0x08 配置ccache用于加快编译速度"></a>0x08 配置ccache用于加快编译速度</h4><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">export</span> USE_CCACHE<span class="token operator">=</span>1$ <span class="token function">cd</span> ~/lineaegos$ prebuilts/misc/linux-x86/ccache/ccache -M 50G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="0x09-配置Jack编译器"><a href="#0x09-配置Jack编译器" class="headerlink" title="0x09 配置Jack编译器"></a>0x09 配置Jack编译器</h4><p>Jack是一款新的Java编译器，此处配置是为了给Jack编译时分配足够的内存，以免因为内存不足而编译失败</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">export</span> ANDROID_JACK_VM_ARGS<span class="token operator">=</span><span class="token string">"-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4G"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="0x10-开始编译吧"><a href="#0x10-开始编译吧" class="headerlink" title="0x10 开始编译吧"></a>0x10 开始编译吧</h4><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">cd</span> ~/lineageos$ <span class="token function">export</span> WITH_SU<span class="token operator">=</span>true <span class="token comment" spellcheck="true">#开启root权限（可选） </span>$ <span class="token function">source</span> ./build/envsetup.sh <span class="token comment" spellcheck="true">#载入环境</span>$ brunch <span class="token operator">&lt;</span>Your Device Name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这又是一段漫长的等待…<br>一旦当编译完成后就可以进入输出目录去找你的刷机包了<br>当然编译中也会不可避免地出现一些报错，这就需要自己去Google或者XDA找寻答案了</p><h4 id="0x99-参考资料"><a href="#0x99-参考资料" class="headerlink" title="0x99 参考资料"></a>0x99 参考资料</h4><ul><li><a href="https://wiki.lineageos.org/devices/kltechn/build" target="_blank" rel="noopener">LineageOS Wiki</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00-前期准备工作&quot;&gt;&lt;a href=&quot;#0x00-前期准备工作&quot; class=&quot;headerlink&quot; title=&quot;0x00 前期准备工作&quot;&gt;&lt;/a&gt;0x00 前期准备工作&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Ubuntu系统，内存至少8GB，硬盘至少预留100GB空间&lt;/li&gt;
&lt;li&gt;自备梯子用于下载安卓源码或者直接前往清华大学镜像源下载&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://blog.kiko.space/tags/Android/"/>
    
      <category term="编程" scheme="https://blog.kiko.space/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.kiko.space/2017/07/18/hello-world/"/>
    <id>https://blog.kiko.space/2017/07/18/hello-world/</id>
    <published>2017-07-17T16:00:00.000Z</published>
    <updated>2018-10-28T08:02:36.166Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
