{"title":"Windows 编译 OpenCV","url":"/2018/11/24/windows-and-cmake-compile-opencv/","content":"由于课程需要，要在 Windows 下编译一个支持 OpenGL 的 OpenCV 旧版本。这里简单地做个总结，以便以后参阅。0x0 准备工作# 编译环境Windows 10 1809CMake 3.13.0OpenCV 2.4.13.6-vc14Visual Stuido 2017# 安装CMake首先需要安装 CMake，进入官网下载安装包，优先选择 cmake-3.13.0-win64-x64.msi，安装完成后可以在开始菜单中找到 cmake-gui。# 下载 OpenCV 源代码进入 OpenCV 的发布页面 下载 OpenCV 源码包，我下载的是 2.4.13.6 版本。运行 opencv-2.4.13.6-vc14.exe，选择解压目录后解压，我选择解压到 H:\\。解压后文件目录如下：为了方便区分，我们把目录改名 opencv-&gt;opencv2413接下来打开 build 文件夹，发现无论是 x86 还是 x64 文件夹下都只有 vc14 版本的二进制、库文件等。而我们的 Visual Studio 2017 对应的版本号是 vc15，也就是官方并没有提供新版本的预编译库文件，所以我要自己动手编译了。这样一来可以把 OpenGL 编译进去，首先清空 build 目录里的所有内容，因为我们下一步要将编译后的文件放入 build 目录。Tips: VC1x 与 Visual Studio 版本号的对应关系VC1xVisual Studio 版本号vc15Visual Studio 2017vc14Visual Studio 2015vc12Visual Studio 2013vc11Visual Studio 2012vc10Visual Studio 20100x1 编译 OpenCV# CMake-GUI 纪元现在打开 cmake-guiWhere is the source code: 先选择待编译的源码目录，我选择的是 H:\\opencv2413\\sourcesWhere to build the binaries:然后选择编译完成后的生成目录，我选择的是 H:\\opencv2413\\build接下来点击左下角的 Configure 按钮，弹出对话框选择 Visual Studio 15 2017，下面的选项默认，然后点击 Finish，等待出现 Configuring done。接下来找到 WITH_OPENGL，并且把它勾选上，这样 OpenCV 就有 OpenGL 加持了。再次点击 Configure 按钮，使之生效。具体可以查看输出信息，确实是支持 OpenGL 的。点击 Generate 后等待出现 Generating done，然后点击 Open Project 打开 Visual Studio 项目。# Visual Studio 纪元打开「解决方案资源管理器」，如果找不到可以在「视图(V)」中打开。首先选择 Release 模式，右键 INSTALL 选择生成，开始编译，编译的时间视机器的性能而定。很长时间过去了…最后，我们可以发现编译后的文件在 H:\\opencv2413\\build\\install 文件夹里。后续，大概还会尝试编译一些 OpenCV 相关的项目吧😋。0x2 参考资料【OpenCV】VS2017配置OpenCV2.4.13.4","tags":["cmake","opencv"]},{"title":"全新安装 Ubuntu 18.04","url":"/2018/09/19/install-ubuntu-18.04/","content":"首先打开「清华大学镜像站」，获取 Ubuntu 的国内镜像地址。不要问我为什么用清华镜像源，因为主页看起来很可口漂亮，速度比较快。然后编辑 /etc/apt/sources.list 用以下内容替换原有内容。0、安装基本组件然后是配置 ZSH 的一系列组件，这里先附上三个项目地址，下面会用到看到它们的名字：oh-my-zshzsh-syntax-highlightingzsh-autosuggestions当前状态是刚装完 zsh，什么都还没做，如果当前默认 Shell 不是 zsh 的话，可以通过 chsh 命令来指定当前用户的默认 Shell。依次执行官方提供的三个脚本：等待安装完毕以后，打开你的 .zshrc 文件，修改如下：最后重新登录即可生效，不过我一般都是 source .zshrc 直接生效。1、配置搜狗输入法首先确保 fcitx安装成功，可以先执行 fcitx-diagnose 查看下当前的状态。然后前往搜狗输入法官网 戳我 下载 deb 包，最后双击安装。接下来是配置部分：(1)、在普通的使用 Xorg 协议的 Gnome 上(2)、在使用了 Wayland 协议的 Gnome 上关于 fcitx 的自启动，把 /usr/share/fcitx/xdg/autostart/fcitx-autostart.desktop 文件拷贝至 /etc/xdg/autostart下即可。[可选项] 由于使用了 fcitx，具有强迫症的话可以执行 sudo apt purge ibus 把自带的 ibus卸载。[可选项] 可以使用搜狗输入法的所有皮肤（除动态皮肤以外），所以去官网挑一个喜欢的皮肤下载后双击安装即可。推荐 柔兰2、安装常用软件有很多软件都是跨平台的，跨平台的技术大概有 Electron、Qt、AppImage等等。需要什么软件，只要通过 &lt;软件名&gt; + Linux 关键词去搜索引擎找一找就可以了。我安装了 Visual Studio Code、Telegram、Typora 这三款。其中 VSCode可以在官网下载到 deb 包，而在 Ubuntu 官方软件仓库中的Telegram 采用了 snap 技术。我尝试安装了 N 次都失败了，所以去官网下载了二进制包，写个 DesktopEntry 丢进 ~/.local/share/applications/ 就直接拿来用了。DesktopEntry 一并附上，来源 @METO，在此感谢~文件名 ：telegramdesktop.desktopTypora是一款很棒的 MarkDown 写作软件，安装步骤也比较简单，只要添加软件源后 sudo apt install typora 就好了。3、配置科学上网环境其一（electron-ssr）：在 Ubuntu下较好的科学上网方式除了普通的 ShadowsocksR-libev、 Shadowsocks-Qt 和 Python 方式，还可以采用 electron-ssr这个项目，在 Release 界面有提供 deb 包，甚至还有 ArchLinux 的 pacman 包。界面如下图：由于 electron-ssr 采用 Python 作为后端，所以在启动 electron-ssr 之前，要确保 Python 环境配置好。如果系统中没有 python 命令的话，程序是可以打开，但是没有任何报错（终端启动可以看到报错），使用 netstat -lntp 查看也没有 1080 端口被打开。首先查看 python 命令是否存在，不存在就先执行 sudo ln /usr/bin/python3 /usr/bin/python，这里我用一个软链接把 python3 链接到 python 上，这样的话系统查找 python 的时候就直接可以使用 python3 。打开 electron-ssr 选择不启用代理后，可以 使用 netstat -lntp 查看到 1080 端口已经打开，这是一种 socks5 代理，代理地址为 127.0.0.1:1080。[巧合？] 我在测试启动的时候提示找不到 canberra-gtk-module，遂安装 libcanberra-gtk-module解决。[小提示] 使用 netstat 命令之前需要先安装 net-tools 软件包。[*可选项] 搭配浏览器拓展 SwitchyOmega 可以获得更加精准的流量转发。其二（proxychains-ng）：这种方案更加适用于终端，首先准备编译环境 sudo apt install build-essential打开项目主页，把源码通过 git clone 或是直接下载压缩包至本地并解压。执行完毕后可以发现库文件、二进制文件和配置文件都已经各就各位。这，就是 Unix 哲学。/usr/lib/libproxychains4.so/usr/bin/proxychains4/etc/proxychains.conf接着修改配置文件 sudo vim /etc/proxychains.conf（忘记 sudo 赶紧退出来，别编辑了），来到最后一行。现在可以通过 proxychains4 &lt;需要代理的命令&gt; 来使用代理，举个例子 proxychains4 curl https://www.google.com，不出意外可以看到一堆文字。Q: 那么老师能不能给力一点啊？A: 再懒一点的话可把 alias ssr=&#39;proxychains4&#39;写入你的  .bashrc 或是 .zshrc 文件里，使用 ssr curl https://www.google.comQ: 那么老师能不能再给力一点啊？A: 使用 proxychains4 -q /bin/zsh 命令绑定一个 Shell，这样在新打开的 Shell 里面执行任何命令都是通过代理的。Q: 那么老师……A: 好了好了，你去吧。其三（ShadowsocksR-libev）:4、配置 GPG 和 SSH首先导入 GPG 公钥和私钥，然后设为绝对信任（什么？连自己的公钥都不设绝对信任是人吗？）创建 ~/.ssh 文件夹，把自己的 SSH 私钥丢进去，通通 chmod 600 确保安全（不执行的话，连服务器会被拒）然后创建 config 文件，按照下面的格式写入配置最后是配置 git，由于直接敲指令太麻烦，所以我一般都是事先备份好 dotfiles，然后安装的时候直接软链接，这里直接对 Commits 开启了 GPG 签名，以确保 Commits 确实是我本人提交的（虽然感觉没有人会冒充我，还给我提交Commits QAQ）。5、配置主题环境首先创建用户本地主题文件夹 ~/.themes、~/.icons，然后打开 Gnome-Look 官网，挑选你喜欢的主题、图标、光标等，把它下载下来解压。主题文件夹丢进 ~/.themes，光标和图标文件夹丢进 ~/.icons里面。然后运行 gnome-tweaks 命令开主题设置，选择需要的主题。最后，大功告成，享受 Ubuntu 带来的快乐吧~（重装了两次，双份的快乐。）","tags":["linux"]},{"title":"修复 Arch Linux 下 Typora 段错误","url":"/2018/08/12/fix-typora-segmentation-fault/","content":"段错误问题你是一名资深的 Arch Linux 用户，你喜欢经常更新系统。而且你还是一名热爱写作的 Typora 用户。那么问题产生了。在最近一次更新系统后，启动 Typora 时会报 段错误(Segmentation Fault)。经过一番查阅 Issues 后，发现报错原因在于 glibc 。各位可以查看一下版本号 2.28-4-x86_64于是使用降级工具将 glibc 降级到 2.27-3-x86_64即可，等待新版本修复吧。困扰了多天的问题终于解决了。方案来源Typora Issuesglibc 2.28 cause core dump on electron based apps后记我又回来了，因为降级了版本后，依赖于 GLIBC_2.28 的 libQt5Core.so 无法运行，导致 sddm 也无法运行，所以我连桌面环境也进不去了。于是我又把 glibc 的版本刷回来了 QAQ, 现在只能等 glibc 修复关于 electron 应用的 bug 了。","tags":["archlinux","typora"]},{"title":"Ubuntu 安装 Caddy 为系统级服务","url":"/2018/07/26/ubuntu-install-caddy/","content":"引言关于Caddy，其作为开箱即用的 HTTPS 服务器而闻名，在此便不多赘述。我根据 Caddy 官方提供的英文文档，一步一步地将 Caddy 通过 linux-systemd 安装至 Ubuntu 系统中。该操作方法也适用于其他将 linux-systemd 作为启动管理工具的 Linux 发行版，包括 ArchLinux。下载 tar.gz 压缩包首先打开 Caddy 官方的下载页面，选择 Linux 平台，添加插件并选择 个人协议(Personal License)，点击开始下载。经过龟速的下载后得到 caddy_v0.XX.0_linux_amd64_personal.tar.gz，然后 tar zxvf 解压之，记得加参数 -C 解压到文件夹里呢。放置 Caddy 的二进制文件拷贝压缩包中附带的 Caddy 二进制文件到 /usr/local/bin 并更改权限。允许 Caddy 的二进制文件绑定端口（例如80,443）构建 Web 服务资源建立所需要的用户组、用户和文件夹，若组ID 33 被占用，可使用其他ID。正确放置 Caddyfile 文件并设置权限创建网站根目录文件夹添加如下配置至 Caddyfile配置 Systemd 服务单元安装 systemd 服务单元，重启  systemd 并启动 Caddy允许 Caddy 服务开机启动若 Caddy 没有成功启动，则可以查看日志来排查引起错误的原因。总结最后往系统中添加的文件如下For DebugCaddy 可以通过 systemctl 进行重启、自启管理等操作Caddy 的配置文件位于 /etc/caddy/CaddyfileCaddy 的网站目录位于 /var/www可通过 systemctl status caddy查看 Caddy 的运行状态鸣谢Caddy 官方英文教程","tags":["caddy","systemd"]},{"title":"记一次手动解码「LEB128」压缩数据","url":"/2018/05/21/leb128-decode/","content":"几天前因为一个项目需要用到「Google」的Protocol Buffers，在项目页找了一圈也没有提供 Bash 版本的编码器和解码器，于是想到按照官方文档给出的数据结构手动解码 二进制数据流(Binary Data Stream)。解码流程假设接收到的数据为 0xDADBFE01首先转为二进制，每8位bit位为一组，得到 (1101 1010) (1101 1011) (1111 1110) (0000 0001)每组数据除去首位，得到 (101 1010) (101 1011) (111 1110) (000 0001)左右调换组的顺序，得到 (000 0001) (111 1110) (101 1011) (101 1010)最后将二进制转回十进制即可得到 整型(Integer) 4173274写成脚本大概这样参考资料LEB128php-protobufEncoding | Google Developers","tags":["算法"]},{"title":"MoriColor-For-Hexo 开发手记","url":"/2018/05/17/moricolor-development/","content":"这里记载了 MoriColor For Hexo 的详细参数、开发日志和感谢列表等。超電磁砲(レールガン)文章页参数元素字号正文1.7rem引用1.5rem代码块1.4rem版权1.5remChangelog2018-07-28逐渐去 JQuery 化，添加 thumbnail2018-07-14修改文章目录样式调整 文章页(Post) 结构2018-05-28添加 时间线(Timeline)模仿 VSCode 重写代码块实验性地为代码块添加 工具栏(Toolbar)添加 友情链接(Friends Link) 页面2018-05-25调整 主页(Home) 和文章页面(Post) 布局优化 bottom-tools 元素布局将文章页面内标签移至左侧实验性地添加文章目录，目前处于隐藏状态调整 引用块(Blockquote) 样式2018-05-24调优 主页(Home) 元素布局2018-05-21更换Ruby插件为hexo-tag-ruby修复代码高亮异常的渲染(Render)问题解决代码高亮丢失行首空格的问题2018-05-20重写代码块样式，添加官方 HighLight.js 支持2018-05-18使代码块适应代码宽度添加文章出处声明自动在中文与英文字符中插入一个半角空格使用 hexo-ruby-character 为 中文(Chinese) 添加注音功能添加 表格(Table) 样式添加 Chrome 标签栏主题色2018-05-17引入 Zoom.js 用于图片缩放添加上一篇、下一篇文章跳转添加灰度背景图像，/* 灰度背景样式来自于 https://imjad.cn/ */部分透明化文章页面中的代码pre部分微调文章正文、引用、代码块的字号Credits森の色猫与向日葵neoFelhz’s BlogLWL Hitokoto APItext-autospaceMarkdown Ruby 标签拓展插件测试hexo-ruby-character从零开始制作 Hexo 主题制作Hexo主题详细教程","tags":["theme"]},{"title":"为 Arch Linux 安装搜狗输入法","url":"/2018/05/10/archlinux-install-fcitx/","content":"折腾过「Ibus」，受不了「Ibus」丑陋的界面，最后还是滚回了「Fcitx」，因为皮肤实在是太好看了~(≧▽≦)/~啦啦啦。安装过程直接从官方仓库 [archlinuxcn] 安装配置输入法，编辑 ~/.xprofile，加入如下内容：这样配置的话，同时能在GTK界面和QT界面中使用输入法。接着从 [AUR] 安装我打包的「柔兰」皮肤安装后直接在搜狗输入法设置里选择皮肤「roulan」就好了，请享用~皮肤来源 AUR地址","tags":["archlinux"]},{"title":"「MoriColor」一款移植自 Typecho 的 Hexo 主题","url":"/2018/04/21/moricolor-for-hexo/","content":"最近看到一款 Typecho 主题 Moricolor ，很是喜欢，但我的博客是基于 Hexo 构建的，自然是不能通用的，于是学习了一下 Hexo 主题开发，简单地制作了这个主题样式的 Hexo 版本。当然你现在看到的博客主题就是这个 Moricolor 了，不过目前还处于 兼容性优化(小白学习) 阶段，暂不公开 Github 项目，等到 TODO 差不多完成的时候就开源。已经开源戳我To-Do ListPWA化封面图修改部分静态资源的 CDN ，比如字体、Material Icon 等首页分页的样式优化说明修改「Archive」和「Tag」页面的标签颜色修改文章页面上方标签和时间显示样式Zoom.js 图片缩放文章上一页、下一页显示更加详细的开发日志参见此处参考资料Hexo 变量Hexo 辅助函数EJS 模板语言Credits本程序源代码可任意修改并任意使用，但禁止商业化用途。一旦使用，任何不可知事件都与原作者无关，原作者不承担任何后果。如果您喜欢，希望可以在页面某处保留原作者 Trii Hsia 版权信息。感谢。","tags":["hexo"]},{"title":"「Arch Linux」配置之磁盘分区","url":"/2018/04/11/archlinux-setup-partition/","content":"这是一篇 「GNU/Linux」 新手的 「Arch Linux」 磁盘分区完全指南。下载镜像和虚拟机加载部分另开一篇再讲，这篇着重于磁盘分区时遇到的坑。Startup分区前先看看磁盘状态lsblk -f  执行 fdisk /dev/sda 后输入 m 查看帮助  列出几个常用的命令：g 初始化 GPT 分区表n 添加新分区d 删除分区t 修改分区类型Partition For BIOS初始化 GPT 磁盘分区表建立 BIOS boot 分区建立 SWAP 分区建立 Linux 文件系统写入分区表格式化磁盘Partition For UEFI类似地分区如下Why这里建立 BIOS boot 分区是为了后面 grub 的安装。我才不会说我因为这个重新安装了三遍呢根据官方 Wiki 的说明：安装 GRUB 前，在一个没有文件系统的磁盘上，用 fdisk 或 gdisk 创建一个 +1M 分区，设置为 BIOS boot 类型，在 fdisk 中的类型号是 4, 在 gdisk 中的类型是 ef02，在 parted 中是 bios_grub。此分区可以在磁盘前 2TB 的任何位置。分区建立好后，按下面的命令安装启动管理器。如果没有 BIOS boot 分区，在执行 grub-install 时将会报错QAQReference给 GNU/Linux 萌新的 Arch Linux 安装指南","tags":["archlinux"]},{"title":"如何实现渐变直线","url":"/2018/04/03/draw-a-gradient-line/","content":"这里的直线要求渐变，因此使用 MoveTo 和 LineTo 画线是行不通的，我们需要手动实现点动成线。之前计算机图形学研究过 DDA 画线算法和中点画线算法，下面就简单改一改拿来画线了。先来道应用题：假如一条线有512个点，要实现从黄色 RGB(255,255,0) 渐变到白色 RGB(255,255,255) 。这里涉及到一些映射的概念，在于将256种颜色分布到512个点上。大概可以得到以下的数学公式：pixel_color / pixel_order = color_count / pixel_count看不懂的话，再来用分组的思想来看，把512个像素点分成256组，每组分得2个点。设「dotX」为这些像素点中的第X个，用X/2就可以得出「dotX」属于第几组，这里的「几」就是它对应的颜色。画线是按点进行 SetPixel 的，可以想象纸带打孔机工作时的状态，所以只要找出点和颜色的对应关系就好了。有如下函数 getColorByOrder ，输入点的次序，输出点应有的颜色。下面就来写这个函数：接下来把一些变量代入就可以变成通用函数了。通过以上算法亦可实现渐变矩形、多色渐变等。渐变矩形颜色分段直线","tags":["算法"]},{"title":"「VIM」编辑器的配置","url":"/2018/03/28/configure-my-vim/","content":"引言记录一下个人的宇宙第一编辑器「VIM」的配置过程，以防下次折腾的时候还要翻阅官方文档。一般而言，Linux 系统都会默认安装 VIM ，就跳过安装了。着重记录安装Vundle作为插件管理器这部份。安装第一步，先把这个项目拉回家，安置在 ~/.vim 目录下。每个用户在 /home 目录下都有一个以用户名命名的文件夹，.vim 表明该文件夹不可见。接下来上拉取的代码：编写vim的配置文件一些注意点：Vundle 支持通过 Git 仓库引入插件插件的引入必须在 begin 和 end 之间安装插件只要打开 vim 窗口，执行指令 :PluginInstall ，插件们就会乖乖地跑进你的文件夹啦。","tags":["linux","vim"]},{"title":"从 Windows 到 Linux","url":"/2018/03/21/windows-to-linux/","content":"引言于 2018.10.01 回归 Ubuntu + GNOME 了。于 2018.04.15 转投「ArchLinux」+ 「KDE」怀抱了。终于在本周狠下心来，抛弃了臃肿不堪的「Windows 10」，投入了「Linux」和开源世界的怀抱来。 个人感受在已经稳稳当当地使用 Ubuntu 一周后，来说一些个人的使用感受。桌面清爽命令行指令无需清理垃圾无需忍受弹窗软件评测我在Linux下安装了以下软件：「VSCode」开源、优雅的代码编辑器「网易云音乐」熟悉音乐播放器，比较良心「搜狗输入法」中文输入法「LibreOffice」文档、表格、演示样样不少 还是国产的WPS Office比较符合使用习惯「Wine-QQ-TIM」我还能在Linux下上QQ 不太方便，还是TG大法好「Telegram」安全、加密的聊天工具「VLC」看视频也没问题的「Gnome桌面环境」令Windows嫉妒的桌面效果 KDE大法好 GNOME 大法好自问自答Q：口亨，Windows能打游戏，Linux不能。A：等等，Steam Linux版本了解一下？《开源世界旅行指南》里有这么一句话：“Windows 能干而 Linux 干不了的事情，那就是不需要干的事情。”现在看来，Linux也是可以打游戏的，那么是否也证明了打游戏是需要干的事情呢（笑）。Q：那么Windows还有什么优势呢？A：目前还没发现什么优势，我在Windows下能干的事情，在Linux下都能干，相比之下甚至效率更高。  Q：。。。A：世界属于Linux，消灭Windows暴政，Windows偶尔打游戏 （逃","tags":["linux"]},{"title":"「OpenWrt」之编译小记","url":"/2017/09/28/how-to-compile-openwrt-ipk/","content":"最近课堂上的专业课不好玩 ，于是入了一个破二手路由器 TP-LINK WR742N 折腾着玩 ，以下简称 WR742 。 后来又入了斐讯K2路由器来折腾。这是一款上市很久的型号了，官方固件都出到v6了，好在和 WR740 硬件构造上基本一样，可以直接使用 openwrt 提供的 WR740 的固件 , 不过光有固件不折腾折腾怎么行呢？  预期目的自动通过 H3C 校园网 802.1x 认证 ✔自动科学上网 ✔免流上校园网 ✖Openwrt 官方提供编译用 SDK，无需下载整个源码即可快速编译 ipk 包。所以我只要下载 SDK 后配置好再编译就可以了。来，编译几个 ipk 包试试。逛了一圈 Github ，找到能够满足 H3C 认证要求的项目 njit8021xclient , 满足科学上网的项目 openwrt-ssr。小坑小记环境内存尽可能大（采用2G内存)内存无法满足需求可开启 swap 空间硬盘留下足够的空间（采用30G SSD硬盘)切换到非 root 用户执行编译操作 为保证环境纯净，就临时租用了一台 US 的主机 ，保证不会出现像国内服务器的404现象。选择按量付费 ，等编译完之后提取固件和 ipk 后留个快照就可以退掉主机了 ，十分节省软妹币和维护时间 ，我才不会说我全程都是在手机操作的呢（笑。0x00 编译环境Ubuntu 16.04 xenialOpenWrt SDK Chaos Calmer 15.05.1Platform ar71xxDevice TP-LINK WR742N Magic Version0x01 安装依赖包0x02 准备OpenWrt SDK0x03 编译前配置0x04 开始编译make package/openwrt-ssr/compile v=99编译成功后的文件在 ~/openwrt/bin/target/ar71xx 目录下。已知bug网口顺序是反着来的，即硬件上的LAN1口=软件上的WAN口，不过不影响使用，那我也反着插好了🌚。  参考资料官方 Wiki官方 Developmentnjit8021xclientopenwrt-ssr","tags":["openwrt"]},{"title":"获取学校图书馆大约50万藏书信息","url":"/2017/08/04/how-to-get-50w-books-info/","content":"事件起因因为我在图书馆借书后总是会忘记还书日期，有一次还因为忘记还书欠了图书馆20多软妹币 (此处捂脸QWQ)于是就想着怎么地 好好学习一下(干他一票) 图书馆官网之后发现图书馆竟然用的是 OPAC，然后我看到了 这一篇文章然后就大费周章轻而易举地 dump 出了学校图书馆管理软件的一些信息，并拿到了 OPAC 的源码，嗯是用世界上最棒的语言PHP写的。实验过程随便找了本书，先访问一下网址看看 http://&lt;学校图书馆地址&gt;/opac/item.php?marc_no=0000478102先标准般地右键审查一下，当分析 HTTP Header 之后，发现不需要 Cookie 就可以访问书籍的介绍页面。然后瞥见一个偌大的二维码！  嗯~ o(*￣▽￣*)o，看来这是一个用php生成的二维码，内容就藏在qrcode参数里面我们先把它小心翼翼地取出来呢，然后使用 php 也好，python 也好, 总之把它解码了任务就完成我一眼就看出来了思虑良久，尝试先 urldecode 之后再 base64_decode, 最后内容就乖乖地出现了(￣▽￣)”233项目Node.JS实现查询已借阅书籍后记实现 Cookie 过期后自动获取新 Cookie抓取图书借阅信息抓取50万本藏书存入数据库通过识别验证码直接登陆图书馆实现已借阅书籍的一键续借总结万事开头难, 当你发现了一本书的奥秘的时候, 那么50万当然就不成问题了, 直接for循环就可以了, 需要的只是时间。","tags":["php"]},{"title":"记录 Android 的编译过程","url":"/2017/07/19/how-to-compile-android/","content":"0x00 前期准备工作Ubuntu系统，内存至少8GB，硬盘至少预留100GB空间自备梯子用于下载安卓源码或者直接前往清华大学镜像源下载0x01 安装Android SDK平台工具输入adb或者fastboot，如果提示不能使用，那就需要从谷歌下载，解压后并添加进环境变量当中0x02 安装编译所需的依赖包这里将使用到apt-get命令，执行前执行一次apt-get update &amp;&amp; apt-get upgrade用于更新依赖包列表对于Ubuntu系统版本低于16.04的请把依赖包中的libwxgtk3.0-dev更换为libwxgtk2.8-devJava版本则推荐安装openjdk-8-jdk这个依赖包0x03 创建源码安装目录0x04 安装repo命令你可能借助梯子从谷歌下载并赋予其可执行权限添加入repo命令所在的bin文件夹至环境变量中这样你就可以在任何地方执行repo命令0x05 开始拉取Android源码拉取之前需要做一步准备工作，设置Git的邮箱和用户名执行以下指令开始拉取，然后去喝杯咖啡，休息一下0x06 准备你自己的设备文件参照如下Andorid_device_samsung_a7xltechnAndroid_vendor_samsung_a7xltechnAndroid_kernel_samsung_a7xltechn0x07 配置虚拟内存Swap0x08 配置ccache用于加快编译速度0x09 配置Jack编译器Jack是一款新的Java编译器，此处配置是为了给Jack编译时分配足够的内存，以免因为内存不足而编译失败0x10 开始编译吧这又是一段漫长的等待…一旦当编译完成后就可以进入输出目录去找你的刷机包了当然编译中也会不可避免地出现一些报错，这就需要自己去Google或者XDA找寻答案了0x99 参考资料LineageOS Wiki","tags":["Android","编程"]},{"title":"Hello World","url":"/2017/07/18/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.Quick StartCreate a new postMore info: WritingRun serverMore info: ServerGenerate static filesMore info: GeneratingDeploy to remote sitesMore info: Deployment"}]